(* -*- tuareg -*- *)
(* NOTE: prepend jbuild.common to this file! *)

let ( ^/ ) = Filename.concat

(* Compute the list of all the source files.

   This is needed until jbuilder supports finding sources in subdirectories somehow
   (https://github.com/janestreet/jbuilder/issues/34). *)

let sources =
  let src_dirs =
    ( if facebook then
        (* do not use the symlinks in src/facebook/: jbuilder will not detect that the files have changed if they are hidden behind a symlink *)
        "../../facebook/skel/infer/src/facebook"
    else "opensource" )
    :: ( ( if clang then ["clang"; ("unit" ^/ "clang")]
         else ["clang_stubs"; ("unit" ^/ "clang_stubs")] )
       @ [ (if java then "java" else "java_stubs")
         ; (if python && facebook then "python" else "python_stubs")
         ; "absint"
         ; "backend"
         ; "base"
         ; "bufferoverrun"
         ; "checkers"
         ; "eradicate"
         ; "harness"
         ; "integration"
         ; "IR"
         ; "labs"
         ; "quandary"
         ; "unit" ] )
  in
  let files = ref [] in
  let ml_suffixes = [".ml"; ".mli"; ".mll"; ".mly"] in
  let add_file dir file =
    if List.exists (Filename.check_suffix file) ml_suffixes then files := (dir ^/ file) :: !files
  in
  let one_dir dir =
    (* absolute path so that running jbuilder from any subdirectory (in particular from src/Makefile)
       points at the right original files in ocamlc's error messages *)
    let abs_dir = Sys.getcwd () ^/ dir in
    Array.iter (add_file abs_dir) (Sys.readdir dir)
  in
  List.iter one_dir src_dirs ; !files

let infer_binaries =
  ["infer"; "inferunit"] @ if facebook then ["InferCreateTraceViewLinks"] else []

let infer_cflags =
  common_cflags @ ["-open"; "InferStdlib"; "-open"; "IStd"; "-open"; "InferGenerated"]

let infer_libraries = "InferStdlib" :: "InferGenerated" :: common_libraries

(** Return the best copy action for a given [source] file. That is, when possibly, use "copy#" so
    that jump-to-defition and compiler errors go to the right original source file, otherwise do a
    normal copy. *)
let copy_action_of_source source =
  if Filename.check_suffix source ".mly" then
    (* menhir doesn't support '# 1 "<source file>"' directives at the start of the file inserted by
       copy# actions *)
    "copy"
  else "copy#"

(** The build stanzas to be passed to jbuilder *)
let stanzas =
  ( if clang then
      ["(ocamllex (types_lexer ctl_lexer))"; "(menhir ((modules (types_parser ctl_parser))))"]
  else [] )
  @ ( if python && facebook then ["(ocamllex (pythonLexer))"; "(menhir ((modules (pythonParser))))"]
    else [] )
  @ [ Format.sprintf
        {|
(library
 ((name InferModules)
  (flags (%s))
  (libraries (%s))
  (modules (:standard \ %s infertop))
  (preprocess (pps (ppx_compare ppx_sexp_conv -no-check)))
 ))
|}
        (String.concat " " infer_cflags) (String.concat " " infer_libraries)
        (String.concat " " infer_binaries)
    ; Format.sprintf
        {|
(executables
 ((names (%s))
  (flags (%s -open InferModules))
  (libraries (InferModules))
  (modules (%s))
  (preprocess (pps (ppx_compare ppx_sexp_conv -no-check)))
 ))
|}
        (String.concat " " infer_binaries) (String.concat " " infer_cflags)
        (String.concat " " infer_binaries)
    ; Format.sprintf
        {|
(executable
 ((name infertop)
  (flags (%s))
  (libraries (utop InferModules))
  (modules (:standard \ %s))
  (link_flags (-linkall -warn-error -31))))
|}
        (String.concat " " infer_cflags) (String.concat " " infer_binaries) ]
  @ List.map
      (fun source ->
        Printf.sprintf "(rule (%s %s %s))" (copy_action_of_source source) source
          (Filename.basename source))
      sources

;; String.concat "\n" stanzas |> Jbuild_plugin.V1.send
