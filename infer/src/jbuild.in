(* -*- tuareg -*- *)
(* use strings so that it looks like OCaml even before substituting, e.g. to use ocamlformat *)

let is_yes = String.equal "yes"

let clang = is_yes "@BUILD_C_ANALYZERS@"

let java = is_yes "@BUILD_JAVA_ANALYZERS@"

let facebook = is_yes "@IS_FACEBOOK_TREE@"

let extra_cflags = if "@EXTRA_CFLAGS" = "" then [] else ["@EXTRA_CFLAGS@"]

let ( ^/ ) = Filename.concat

(* Compute the list of all the source files.

   This is needed until jbuilder supports finding sources in subdirectories somehow
   (https://github.com/janestreet/jbuilder/issues/34). *)

let sources =
  let src_dirs =
    (* if you update the list of source directories, do not forget to also update .merlin *)
    "."
    :: ( if facebook then
           (* do not use the symlinks in src/facebook/: jbuilder will not detect that the files have changed if they are hidden behind a symlink *)
           "../../facebook/skel/infer/src/facebook"
       else "opensource" )
       :: ( ( if clang then ["clang"; "clang_plugin"; ("unit" ^/ "clang")]
            else ["clang_stubs"; ("unit" ^/ "clang_stubs")] )
          @ [ (if java then "java" else "java_stubs")
            ; "absint"
            ; "backend"
            ; "base"
            ; "bufferoverrun"
            ; "checkers"
            ; "eradicate"
            ; "harness"
            ; "integration"
            ; "IR"
            ; "labs"
            ; "quandary"
            ; "unit" ] )
  in
  let files = ref [] in
  let ml_suffixes = [".ml"; ".mli"; ".mll"; ".mly"] in
  let add_file dir file =
    if List.exists (Filename.check_suffix file) ml_suffixes then files := (dir ^/ file) :: !files
  in
  let one_dir dir =
    (* absolute path so that running jbuilder from any subdirectory (in particular from src/Makefile)
       points at the right original files in ocamlc's error messages *)
    let abs_dir = Sys.getcwd () ^/ dir in
    Array.iter (add_file abs_dir) (Sys.readdir dir)
  in
  List.iter one_dir src_dirs ; !files

let common_cflags =
  let fatal_warnings = "+3+5+6+8+10+11+12+18+19+20+21+23+26+29+27+32+33+34+35+37+38+39+50+52+57" in
  let warnings = fatal_warnings ^ "-4-9-40-41-42-45-48" in
  let common_flags =
    [ "-g"
    ; "-short-paths"
    ; "-safe-string"
    ; "-principal"
    ; "-strict-formats"
    ; "-strict-sequence"
    ; "-bin-annot"
    ; "-w"
    ; warnings ]
  in
  match Jbuild_plugin.V1.context with
  | "test"
   -> "-warn-error" :: fatal_warnings :: common_flags
  | "default"
   -> common_flags
  | ctx
   -> invalid_arg ("unknown context: " ^ ctx)

(** Make a library that includes just IStd and IList. These files have different compilation flags
    than infer (they don't include IStd!). *)
let inferBaseStdlib = "InferBaseStdlib"

let iStd = "IStd"

let inferBaseStdlib_modules = ["IList"; iStd]

let inferBaseStdlib_cflags = common_cflags

(** Generated code (eg, from atdgen) is also compiled using different flags, so pack it in a
    separated library. *)
let inferGenerated = "InferGenerated"

let inferGenerated_modules =
  ( if clang then
      [ "Clang_ast_b"
      ; "Clang_ast_j"
      ; "Clang_ast_t"
      ; "Clang_ast_v"
      ; "Clang_ast_proj"
      ; "Clang_ast_types"
      ; "Clang_ast_visit" ]
  else [] )
  @ ["Jsonbug_j"; "Jsonbug_t"; "Stacktree_j"; "Stacktree_t"]

let inferGenerated_cflags = common_cflags @ ["-w"; "-27-32-34-35-39"]

let infer_binaries =
  ["infer"; "inferunit"] @ if facebook then ["InferCreateTraceViewLinks"] else []

let infer_cflags =
  common_cflags @ ["-open"; inferBaseStdlib; "-open"; iStd; "-open"; inferGenerated]

let common_libraries =
  (if java then ["javalib"; "ptrees"; "sawja"] else [])
  @ [ "ANSITerminal"
    ; "atdgen"
    ; "cmdliner"
    ; "core"
    ; "extlib"
    ; "oUnit"
    ; "parmap"
    ; "str"
    ; "unix"
    ; "xmlm"
    ; "yojson"
    ; "zip" ]

(** Return the best copy action for a given [source] file. That is, when possibly, use "copy#" so
    that jump-to-defition and compiler errors go to the right original source file, otherwise do a
    normal copy. *)
let copy_action_of_source source =
  if Filename.check_suffix source ".mly" then
    (* menhir doesn't support '# 1 "<source file>"' directives at the start of the file inserted by
       copy# actions *)
    "copy"
  else "copy#"

(** The build stanzas to be passed to jbuilder *)
let stanzas =
  ( if clang then
      ["(ocamllex (types_lexer ctl_lexer))"; "(menhir ((modules (types_parser ctl_parser))))"]
  else [] )
  @ [ Format.sprintf
        {|
(library
 ((name %s)
  (flags (%s))
  (modules (%s))
  (libraries (atdgen))
 ))
|}
        inferGenerated (String.concat " " inferGenerated_cflags)
        (String.concat " " inferGenerated_modules)
    ; Format.sprintf
        {|
(library
 ((name %s)
  (flags (%s))
  (modules (%s))
  (libraries (%s))
 ))
|}
        inferBaseStdlib (String.concat " " inferBaseStdlib_cflags)
        (String.concat " " inferBaseStdlib_modules) (String.concat " " common_libraries)
    ; Format.sprintf
        {|
(library
 ((name InferModules)
  (flags (%s))
  (libraries (%s %s %s))
  (modules (:standard \ %s infertop %s %s))
  (preprocess (pps (ppx_compare)))
 ))
|}
        (String.concat " " infer_cflags) (String.concat " " common_libraries) inferBaseStdlib
        inferGenerated (String.concat " " infer_binaries)
        (String.concat " " inferBaseStdlib_modules) (String.concat " " inferGenerated_modules)
    ; Format.sprintf
        {|
(executables
 ((names (%s))
  (flags (%s -open InferModules))
  (libraries (InferModules))
  (modules (%s))
  (preprocess (pps (ppx_compare)))
 ))
|}
        (String.concat " " infer_binaries) (String.concat " " infer_cflags)
        (String.concat " " infer_binaries)
    ; Format.sprintf
        {|
(executable
 ((name infertop)
  (flags (%s))
  (libraries (utop InferModules))
  (modules (:standard \ %s))
  (link_flags (-linkall -warn-error -31))))
|}
        (String.concat " " infer_cflags) (String.concat " " infer_binaries) ]
  @ List.map
      (fun source ->
        Printf.sprintf "(rule (%s %s %s))" (copy_action_of_source source) source
          (Filename.basename source))
      sources

;; String.concat "\n" stanzas |> Jbuild_plugin.V1.send
