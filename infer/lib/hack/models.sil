// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

.source_language = "hack"

// This function has an OCaml model
declare $builtins.nondet() : int

type HackString = { val: *string }

define $builtins.hack_string(str: *string) : *HackMixed {
  #entry:
    n0 = __sil_allocate(<HackString>)
    n1: *string = load &str
    store n0.HackString.val <- n1 : *string
    ret n0
}

type HackInt = { val: int }

define $builtins.hack_int(i: int) : *HackMixed {
  #entry:
    n0 = __sil_allocate(<HackInt>)
    n1: int = load &i
    store n0.HackInt.val <- n1 : int
    ret n0
}

type HackBool = { val: int }

define $builtins.hack_make_random_bool(): *HackBool {
  #entry:
    n0 = __sil_allocate(<HackBool>)
    n1 = $builtins.nondet()
    store n0.HackBool.val <- n1 : int
    ret n0
}

define $builtins.hack_make_true(): *HackBool {
  #entry:
    n0 = __sil_allocate(<HackBool>)
    store n0.HackBool.val <- 1 : int
    ret n0
}

define $builtins.hack_make_false(): *HackBool {
  #entry:
    n0 = __sil_allocate(<HackBool>)
    store n0.HackBool.val <- 0 : int
    ret n0
}

define $builtins.hack_is_true(b: *HackMixed) : int {
  #entry:
    n0: *HackMixed = load &b
    n1: int = load n0.HackBool.val
    ret n1
}

define $builtins.hack_neg(b: *HackBool) : *HackBool {
  #entry:
    n0: *HackBool = load &b
    n1: int = load n0.HackBool.val
    jmp is_true, is_false
  #is_true:
    prune n1
    ret $builtins.hack_make_false()
  #is_false:
    prune !n1
    ret $builtins.hack_make_true()

}

define $builtins.hhbc_cmp_eq(x: *HackMixed, y: *HackMixed) : *HackBool {
  //TODO: provide something more generic (right now, it works for int only)
  #entry:
    n0: *HackMixed = load &x
    n1: *HackMixed = load &y
    n2: int = load n0.HackInt.val
    n3: int = load n1.HackInt.val
    n4 = __sil_eq(n2, n3)
    n5 = __sil_allocate(<HackBool>)
    store n5.HackBool.val <- n4 : int
    ret n5
}

define $builtins.hhbc_cmp_neq(x: *HackMixed, y: *HackMixed) : *HackBool {
  //TODO: provide something more generic (right now, it works for int only)
  #entry:
    n0: *HackMixed = load &x
    n1: *HackMixed = load &y
    n2: int = load n0.HackInt.val
    n3: int = load n1.HackInt.val
    n4 = __sil_ne(n2, n3)
    n5 = __sil_allocate(<HackBool>)
    store n5.HackBool.val <- n4 : int
    ret n5
}

define $builtins.hhbc_cmp_same(x: *HackMixed, y: *HackMixed) : *HackBool {
  #entry:
    n0: *HackMixed = load &x
    n1: *HackMixed = load &y
    jmp eq, x_eq_null, x_ne_null, ne
  #eq:
    prune __sil_eq(n0, n1)
    ret $builtins.hack_make_true()
  #x_eq_null:
    prune __sil_eq(n0, 0)
    prune __sil_ne(n1, 0)
    ret $builtins.hack_make_false()
  #x_ne_null:
    prune __sil_ne(n0, 0)
    prune __sil_eq(n1, 0)
    ret $builtins.hack_make_false()
  #ne:
    prune __sil_ne(n0, n1)
    prune __sil_ne(n0, 0)
    prune __sil_ne(n1, 0)
    ret $builtins.hack_make_random_bool()
    // TODO: refine for primitives value (because they are boxed)
}

define $builtins.hhbc_cmp_nsame(x: *HackMixed, y: *HackMixed) : *HackBool {
  #entry:
    n0: *HackMixed = load &x
    n1: *HackMixed = load &y
    ret $builtins.hack_neg($builtins.hhbc_cmp_same(n0, n1))
}

define $builtins.hhbc_class_has_reified_generics(class: *HackMixed): *HackMixed {
  #entry:
    ret $builtins.hack_make_false()
}

define $builtins.hhbc_has_reified_parent(class: *HackMixed): *HackMixed {
  #entry:
    ret $builtins.hack_make_false()
}

define $builtins.hhbc_is_type_struct_c(o: *HackMixed, dict: *HackMixed, i: *HackMixed): *HackMixed {
  #entry:
    ret $builtins.hack_make_random_bool()
}

define $builtins.hhbc_is_type_int(o: *HackMixed): *HackMixed {
  #entry:
    ret $builtins.hack_make_random_bool()
}

define $builtins.hhbc_is_type_null(o: *HackMixed): *HackMixed {
  #entry:
    jmp tlab, flab

  #tlab:
    n0: *HackMixed = load &o
    prune __sil_ne(n0, 0)
    ret $builtins.hack_make_false()

  #flab:
    n0: *HackMixed = load &o
    prune __sil_lnot(__sil_ne(n0, 0))
    ret $builtins.hack_make_true()

    // n0 = __sil_ne(n2, 0)
    // n1 = __sil_allocate(<HackBool>)
    // store n1.HackBool.val <- n0 : int
    // ret n1
}

define $builtins.hhbc_is_late_bound_cls(o: *HackMixed): *HackMixed {
  #entry:
    ret $builtins.hack_make_random_bool()
}

// TODO: Treating this as unknown causes FPs
define $builtins.hhbc_verify_type_pred(o: *HackMixed, typ: *HackMixed): *HackMixed {
  #entry:
    ret null
}


define $builtins.hhbc_verify_param_type_ts(o: *HackMixed, typ: *HackMixed): *HackMixed {
  #entry:
    ret null
}

// TODO: Treating this as unknown causes FPs
define $builtins.hhbc_lock_obj(o: *HackMixed): *HackMixed {
  #entry:
    ret null
}

define $builtins.hhbc_check_this(o: *HackMixed): *HackMixed {
  #entry:
    ret null
}

define $builtins.hhbc_new_vec(o: *HackMixed): *HackMixed {
  #entry:
    ret null
}

define HackMixed._86reifiedinit(o: *HackMixed): *HackMixed {
  #entry:
    ret null
}
