{
  "pulse-taint-policies": [
    { "short_description": "Simple Test",
      "taint_flows": [
        { "source_kinds": ["SecondSimpleSource"],
          "sanitizer_kinds": ["SimpleSanitizer"],
          "sink_kinds": ["SecondSimpleSink"]
        }
      ]
    },
    { "short_description": "Input Create to Handler",
      "taint_flows": [
        { "source_kinds": ["InputCreate"],
          "sink_kinds": ["Handler"]
        }
      ]
    }
  ],
  "pulse-taint-sources": [
      { "class_names": ["InferTaint"],
        "method_names": ["taintsArg:"],
        "kinds": ["SecondSimpleSource"],
        "taint_target": ["ArgumentPositions", [0]]
      },
      { "class_names": ["MailboxTaint"],
        "method_names": ["source"],
        "kinds": ["SimpleSource"] },
      {"procedure": "AttributedStringProviderInputCreate", "kinds": ["InputCreate"]},
      {"procedure": "StringProviderInputCreate", "kinds": ["InputCreate"]},
      {"procedure": "ProviderInputCreate", "kinds": ["InputCreate"]},
      { "procedure": "clashingBlockNameOk",
        "taint_target": ["ArgumentPositions",[0]],
        "kinds": ["SimpleSource"] },
      {"procedure": "tainted_dictionary", "kinds": ["SimpleSource"]},
      {"procedure": "tainted_set", "kinds": ["SimpleSource"]},
      {"procedure": "create_tainted", "kinds": ["SimpleSource"]},
      {"procedure": "create_tainted_id", "kinds": ["SimpleSource"]}
  ],
  "pulse-taint-sinks": [
      { "class_names": ["InferTaint"],
        "method_names": ["twoKindSink:"],
        "kinds": ["SimpleSink","SecondSimpleSink"],
        "taint_target": ["ArgumentPositions", [0]]
      },
      { "procedure": "HandleIntentForKey",
        "kinds": ["Handler"],
        "taint_target": ["ArgumentPositions", [2]] },
      { "procedure": "HandleIntent",
        "kinds": ["Handler"],
        "taint_target": ["ArgumentPositions", [2]] },
      { "procedure": "VaultOpenAppleMapForAddress",
        "kinds": ["Handler"],
        "taint_target": ["ArgumentPositions", [0]] },
      { "class_names": ["MailboxTaint"],
        "method_names": ["sink:"],
        "kinds": ["SimpleSink"],
        "taint_target": ["ArgumentPositions", [0]] },
      {"procedure": "testNSDictionary_sink", "kinds": ["SimpleSink"]},
      {"procedure": "testNSSet_sink", "kinds": ["SimpleSink"]}
  ],
  "pulse-taint-propagators": [
      {
        "class_names": ["NSDictionary"],
        "taint_target": "ReturnValue",
        "method_names":
          [ "dictionaryWithObjects:forKeys:", "dictionaryWithObjects:forKeys:count:"
          , "initWithObjects:forKeys:", "initWithObjects:forKeys:count:"
          , "dictionaryWithObjectsAndKeys:", "initWithObjectsAndKeys:", "dictionaryWithObject:forKey:"
          , "dictionaryWithDictionary:", "initWithDictionary:", "initWithDictionary:copyItems:"
          , "dictionaryWithContentsOfURL:error:"
          , "initWithCoder:"
          , "sharedKeySetForKeys:"
          , "count"
          , "isEqualToDictionary:"
          , "allKeys", "allKeysForObject:", "allValues", "valueForKey:"
          , "objectsForKeys:notFoundMarker:", "objectForKey:", "objectForKeyedSubscript:"
          , "keyEnumerator", "objectEnumerator"
          , "countByEnumeratingWithState:objects:count:"
          , "keysSortedByValueUsingSelector:", "keysSortedByValueUsingComparator:", "keysSortedByValueWithOptions:usingComparator:"
          , "keysOfEntriesPassingTest:", "keysOfEntriesWithOptions:passingTest:"
          , "writeToURL:error:"
          , "fileSize", "fileType", "fileCreationDate", "fileModificationDate" ,"filePosixPermissions"
          , "fileOwnerAccountID", "fileOwnerAccountName", "fileGroupOwnerAccountID", "fileGroupOwnerAccountName"
          , "fileExtensionHidden", "fileIsImmutable", "fileIsAppendOnly", "fileSystemFileNumber", "fileSystemNumber"
          , "fileHFSTypeCode", "fileHFSCreatorCode"
          , "description", "descriptionInStringsFileFormat:", "descriptionWithLocale:", "descriptionWithLocale:indent:"
          ]
      },
      {
        "class_names": ["NSDictionary"],
        "taint_target": ["ArgumentPositions", [0]],
        "method_names": ["enumerateKeysAndObjectsUsingBlock:", "enumerateKeysAndObjectsWithOptions:usingBlock:"]
      },
      {
        "class_names": ["NSDictionary"],
        "taint_target": ["ArgumentPositions", [1,2]],
        "method_names": ["getObjects:andKeys:count:", "writeToURL:error:"]
      },
      {
        "class_names": ["NSDictionary"],
        "taint_target": ["ArgumentPositions", [2]],
        "method_names": ["countByEnumeratingWithState:objects:count:"]
      },
      {
        "class_names": ["NSSet"],
        "taint_target": "ReturnValue",
        "method_names":
          [ "setWithArray:", "setWithObject:", "setWithObjects:", "setWithObjects:count:"
          , "setByAddingObject:", "setByAddingObjectsFromSet:", "setByAddingObjectsFromArray:"
          , "initWithArray:", "initWithObjects:", "initWithObjects:count:"
          , "initWithSet:", "initWithSet:copyItems:"
          , "count", "allObjects", "anyObject", "containsObject:"
          , "filteredSetUsingPredicate:"
          , "makeObjectsPerformSelector:", "makeObjectsPerformSelector:withObject:"
          , "member:", "objectEnumerator"
          , "objectsPassingTest:", "objectsWithOptions:passingTest:"
          , "isSubsetOfSet:", "intersectsSet:", "isEqualToSet:", "valueForKey:", "setValue:forKey:"
          , "sortedArrayUsingDescriptors:"
          , "description", "descriptionWithLocale:"
          , "initWithCoder:", "setWithCollectionViewIndexPath:", "setWithCollectionViewIndexPaths:"
          , "enumerateIndexPathsWithOptions:usingBlock:"
          ]
      },
      {
        "class_names": ["NSSet"],
        "taint_target": ["ArgumentPositions", [0]],
        "method_names":
          [ "makeObjectsPerformSelector:", "enumerateObjectsUsingBlock:"
          , "enumerateObjectsWithOptions:usingBlock:", "setValue:forKey:"
          ]
      },
      {
        "class_names": ["NSSet"],
        "taint_target": ["ArgumentPositions", [0, 2]],
        "method_names": ["makeObjectsPerformSelector:withObject:"]
      }
  ]
}
