digraph iCFG {
81 [label="81:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 81 -> 65 ;
80 [label="80: Prune (false branch) \n   n$41=*&SIL_temp_conditional___74:int  [line 38]\n  NULLIFY(&SIL_temp_conditional___74,true); [line 38]\n  PRUNE((n$41 == 0), false); [line 38]\n  REMOVE_TEMPS(n$41); [line 38]\n " shape="invhouse"]
	

	 80 -> 73 ;
79 [label="79: Prune (true branch) \n   n$41=*&SIL_temp_conditional___74:int  [line 38]\n  NULLIFY(&SIL_temp_conditional___74,true); [line 38]\n  PRUNE((n$41 != 0), true); [line 38]\n  REMOVE_TEMPS(n$41); [line 38]\n  NULLIFY(&target,false); [line 38]\n " shape="invhouse"]
	

	 79 -> 81 ;
78 [label="78:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___74); [line 38]\n  *&SIL_temp_conditional___74:int =1 [line 38]\n  APPLY_ABSTRACTION; [line 38]\n " shape="box"]
	

	 78 -> 74 ;
77 [label="77:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___74); [line 38]\n  *&SIL_temp_conditional___74:int =0 [line 38]\n  APPLY_ABSTRACTION; [line 38]\n " shape="box"]
	

	 77 -> 74 ;
76 [label="76: Prune (false branch) \n   n$40=*&target:class A * [line 38]\n  PRUNE((n$40 == 0), false); [line 38]\n  REMOVE_TEMPS(n$40); [line 38]\n " shape="invhouse"]
	

	 76 -> 78 ;
75 [label="75: Prune (true branch) \n   n$40=*&target:class A * [line 38]\n  PRUNE((n$40 != 0), true); [line 38]\n  REMOVE_TEMPS(n$40); [line 38]\n " shape="invhouse"]
	

	 75 -> 77 ;
74 [label="74: + \n  " ]
	

	 74 -> 79 ;
	 74 -> 80 ;
73 [label="73: + \n  " ]
	

	 73 -> 71 ;
	 73 -> 72 ;
72 [label="72: Prune (false branch) \n   PRUNE((0 == 0), false); [line 36]\n " shape="invhouse"]
	

	 72 -> 66 ;
71 [label="71: Prune (true branch) \n   PRUNE((0 != 0), true); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="invhouse"]
	

	 71 -> 70 ;
70 [label="70: + \n  " ]
	

	 70 -> 75 ;
	 70 -> 76 ;
69 [label="69:  Return Stmt \n   n$38=*&self:class A * [line 13]\n  n$39=*n$38._x:int  [line 13]\n  *&return:int =n$39 [line 13]\n  REMOVE_TEMPS(n$38,n$39); [line 13]\n  NULLIFY(&self,false); [line 13]\n  APPLY_ABSTRACTION; [line 13]\n " shape="box"]
	

	 69 -> 68 ;
68 [label="68: Exit A_x \n  " color=yellow style=filled]
	

67 [label="67: Start A_x (generated)\nFormals:  self:class A *\nLocals:  \n   DECLARE_LOCALS(&return); [line 13]\n " color=yellow style=filled]
	

	 67 -> 69 ;
66 [label="66:  Return Stmt \n   n$37=*&target:class A * [line 37]\n  n$36=_fun_A_x(n$37:class A *) virtual [line 37]\n  *&return:int =n$36 [line 37]\n  REMOVE_TEMPS(n$36,n$37); [line 37]\n  NULLIFY(&target,false); [line 37]\n  APPLY_ABSTRACTION; [line 37]\n " shape="box"]
	

	 66 -> 65 ;
65 [label="65: Exit test2 \n  " color=yellow style=filled]
	

64 [label="64: Start test2\nFormals:  target:class A *\nLocals:  \n   DECLARE_LOCALS(&return); [line 35]\n " color=yellow style=filled]
	

	 64 -> 70 ;
63 [label="63:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 63 -> 46 ;
62 [label="62: Prune (false branch) \n   n$31=*&SIL_temp_conditional___55:int  [line 33]\n  NULLIFY(&SIL_temp_conditional___55,true); [line 33]\n  PRUNE((n$31 == 0), false); [line 33]\n  REMOVE_TEMPS(n$31); [line 33]\n " shape="invhouse"]
	

	 62 -> 54 ;
61 [label="61: Prune (true branch) \n   n$31=*&SIL_temp_conditional___55:int  [line 33]\n  NULLIFY(&SIL_temp_conditional___55,true); [line 33]\n  PRUNE((n$31 != 0), true); [line 33]\n  REMOVE_TEMPS(n$31); [line 33]\n  NULLIFY(&target,false); [line 33]\n " shape="invhouse"]
	

	 61 -> 63 ;
60 [label="60:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___55); [line 33]\n  *&SIL_temp_conditional___55:int =1 [line 33]\n  APPLY_ABSTRACTION; [line 33]\n " shape="box"]
	

	 60 -> 55 ;
59 [label="59:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___55); [line 33]\n  *&SIL_temp_conditional___55:int =0 [line 33]\n  APPLY_ABSTRACTION; [line 33]\n " shape="box"]
	

	 59 -> 55 ;
58 [label="58: Prune (false branch) \n   PRUNE(((n$30 != (void *)0) == 0), false); [line 31]\n  REMOVE_TEMPS(n$30); [line 31]\n " shape="invhouse"]
	

	 58 -> 60 ;
57 [label="57: Prune (true branch) \n   PRUNE(((n$30 != (void *)0) != 0), true); [line 31]\n  REMOVE_TEMPS(n$30); [line 31]\n " shape="invhouse"]
	

	 57 -> 59 ;
56 [label="56:  BinaryOperatorStmt: NE \n   n$30=*&target:class A * [line 31]\n " shape="box"]
	

	 56 -> 57 ;
	 56 -> 58 ;
55 [label="55: + \n  " ]
	

	 55 -> 61 ;
	 55 -> 62 ;
54 [label="54: + \n  " ]
	

	 54 -> 52 ;
	 54 -> 53 ;
53 [label="53: Prune (false branch) \n   PRUNE((0 == 0), false); [line 31]\n " shape="invhouse"]
	

	 53 -> 47 ;
52 [label="52: Prune (true branch) \n   PRUNE((0 != 0), true); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="invhouse"]
	

	 52 -> 51 ;
51 [label="51: + \n  " ]
	

	 51 -> 56 ;
47 [label="47:  Return Stmt \n   n$27=*&target:class A * [line 32]\n  n$26=_fun_A_x(n$27:class A *) virtual [line 32]\n  *&return:int =n$26 [line 32]\n  REMOVE_TEMPS(n$26,n$27); [line 32]\n  NULLIFY(&target,false); [line 32]\n  APPLY_ABSTRACTION; [line 32]\n " shape="box"]
	

	 47 -> 46 ;
46 [label="46: Exit test1 \n  " color=yellow style=filled]
	

45 [label="45: Start test1\nFormals:  target:class A *\nLocals:  \n   DECLARE_LOCALS(&return); [line 30]\n " color=yellow style=filled]
	

	 45 -> 51 ;
44 [label="44:  BinaryOperatorStmt: Assign \n   n$24=*&self:class A * [line 13]\n  n$25=*&x:int  [line 13]\n  *n$24._x:int =n$25 [line 13]\n  REMOVE_TEMPS(n$24,n$25); [line 13]\n  NULLIFY(&self,false); [line 13]\n  NULLIFY(&x,false); [line 13]\n  APPLY_ABSTRACTION; [line 13]\n " shape="box"]
	

	 44 -> 43 ;
43 [label="43: Exit A_setX: \n  " color=yellow style=filled]
	

42 [label="42: Start A_setX: (generated)\nFormals:  self:class A * x:int \nLocals:  \n   DECLARE_LOCALS(&return); [line 13]\n " color=yellow style=filled]
	

	 42 -> 44 ;
38 [label="38:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 38 -> 21 ;
37 [label="37: Prune (false branch) \n   n$16=*&SIL_temp_conditional___30:int  [line 26]\n  NULLIFY(&SIL_temp_conditional___30,true); [line 26]\n  PRUNE((n$16 == 0), false); [line 26]\n  REMOVE_TEMPS(n$16); [line 26]\n " shape="invhouse"]
	

	 37 -> 29 ;
36 [label="36: Prune (true branch) \n   n$16=*&SIL_temp_conditional___30:int  [line 26]\n  NULLIFY(&SIL_temp_conditional___30,true); [line 26]\n  PRUNE((n$16 != 0), true); [line 26]\n  REMOVE_TEMPS(n$16); [line 26]\n  NULLIFY(&a,false); [line 26]\n " shape="invhouse"]
	

	 36 -> 38 ;
35 [label="35:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___30); [line 26]\n  *&SIL_temp_conditional___30:int =1 [line 26]\n  APPLY_ABSTRACTION; [line 26]\n " shape="box"]
	

	 35 -> 30 ;
34 [label="34:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___30); [line 26]\n  *&SIL_temp_conditional___30:int =0 [line 26]\n  APPLY_ABSTRACTION; [line 26]\n " shape="box"]
	

	 34 -> 30 ;
33 [label="33: Prune (false branch) \n   PRUNE(((n$15 != (void *)0) == 0), false); [line 24]\n  REMOVE_TEMPS(n$15); [line 24]\n " shape="invhouse"]
	

	 33 -> 35 ;
32 [label="32: Prune (true branch) \n   PRUNE(((n$15 != (void *)0) != 0), true); [line 24]\n  REMOVE_TEMPS(n$15); [line 24]\n " shape="invhouse"]
	

	 32 -> 34 ;
31 [label="31:  BinaryOperatorStmt: NE \n   n$15=*&a:class A * [line 24]\n " shape="box"]
	

	 31 -> 32 ;
	 31 -> 33 ;
30 [label="30: + \n  " ]
	

	 30 -> 36 ;
	 30 -> 37 ;
29 [label="29: + \n  " ]
	

	 29 -> 27 ;
	 29 -> 28 ;
28 [label="28: Prune (false branch) \n   PRUNE((0 == 0), false); [line 24]\n " shape="invhouse"]
	

	 28 -> 22 ;
27 [label="27: Prune (true branch) \n   PRUNE((0 != 0), true); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="invhouse"]
	

	 27 -> 26 ;
26 [label="26: + \n  " ]
	

	 26 -> 31 ;
22 [label="22:  Return Stmt \n   n$12=*&a:class A * [line 25]\n  n$11=_fun_A_x(n$12:class A *) virtual [line 25]\n  *&return:int =n$11 [line 25]\n  REMOVE_TEMPS(n$11,n$12); [line 25]\n  NULLIFY(&a,false); [line 25]\n  APPLY_ABSTRACTION; [line 25]\n " shape="box"]
	

	 22 -> 21 ;
21 [label="21: Exit A_initWithRequest: \n  " color=yellow style=filled]
	

20 [label="20: Start A_initWithRequest:\nFormals:  self:class A * a:class A *\nLocals:  \n   DECLARE_LOCALS(&return); [line 23]\n  NULLIFY(&self,false); [line 23]\n " color=yellow style=filled]
	

	 20 -> 26 ;
19 [label="19:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 19 -> 2 ;
18 [label="18: Prune (false branch) \n   n$5=*&SIL_temp_conditional___11:int  [line 21]\n  NULLIFY(&SIL_temp_conditional___11,true); [line 21]\n  PRUNE((n$5 == 0), false); [line 21]\n  REMOVE_TEMPS(n$5); [line 21]\n " shape="invhouse"]
	

	 18 -> 10 ;
17 [label="17: Prune (true branch) \n   n$5=*&SIL_temp_conditional___11:int  [line 21]\n  NULLIFY(&SIL_temp_conditional___11,true); [line 21]\n  PRUNE((n$5 != 0), true); [line 21]\n  REMOVE_TEMPS(n$5); [line 21]\n  NULLIFY(&target,false); [line 21]\n " shape="invhouse"]
	

	 17 -> 19 ;
16 [label="16:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___11); [line 21]\n  *&SIL_temp_conditional___11:int =1 [line 21]\n  APPLY_ABSTRACTION; [line 21]\n " shape="box"]
	

	 16 -> 11 ;
15 [label="15:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___11); [line 21]\n  *&SIL_temp_conditional___11:int =0 [line 21]\n  APPLY_ABSTRACTION; [line 21]\n " shape="box"]
	

	 15 -> 11 ;
14 [label="14: Prune (false branch) \n   PRUNE(((n$4 != (void *)0) == 0), false); [line 19]\n  REMOVE_TEMPS(n$4); [line 19]\n " shape="invhouse"]
	

	 14 -> 16 ;
13 [label="13: Prune (true branch) \n   PRUNE(((n$4 != (void *)0) != 0), true); [line 19]\n  REMOVE_TEMPS(n$4); [line 19]\n " shape="invhouse"]
	

	 13 -> 15 ;
12 [label="12:  BinaryOperatorStmt: NE \n   n$4=*&target:class A * [line 19]\n " shape="box"]
	

	 12 -> 13 ;
	 12 -> 14 ;
11 [label="11: + \n  " ]
	

	 11 -> 17 ;
	 11 -> 18 ;
10 [label="10: + \n  " ]
	

	 10 -> 8 ;
	 10 -> 9 ;
9 [label="9: Prune (false branch) \n   PRUNE((0 == 0), false); [line 19]\n " shape="invhouse"]
	

	 9 -> 3 ;
8 [label="8: Prune (true branch) \n   PRUNE((0 != 0), true); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="invhouse"]
	

	 8 -> 7 ;
7 [label="7: + \n  " ]
	

	 7 -> 12 ;
3 [label="3:  Return Stmt \n   n$1=*&target:class A * [line 20]\n  n$0=_fun_A_x(n$1:class A *) virtual [line 20]\n  *&return:int =n$0 [line 20]\n  REMOVE_TEMPS(n$0,n$1); [line 20]\n  NULLIFY(&target,false); [line 20]\n  APPLY_ABSTRACTION; [line 20]\n " shape="box"]
	

	 3 -> 2 ;
2 [label="2: Exit A_addTarget: \n  " color=yellow style=filled]
	

1 [label="1: Start A_addTarget:\nFormals:  self:class A * target:class A *\nLocals:  \n   DECLARE_LOCALS(&return); [line 18]\n  NULLIFY(&self,false); [line 18]\n " color=yellow style=filled]
	

	 1 -> 7 ;
}
