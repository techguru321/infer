digraph iCFG {
107 [label="107:  DeclStmt \n   n$20=_fun_NSString_stringWithUTF8String:(\"\":char *) [line 36]\n  _fun___objc_retain(n$20:class NSString *) [line 36]\n  *&__assert_fn__:class NSString *=n$20 [line 36]\n  REMOVE_TEMPS(n$20); [line 36]\n " shape="box"]
	

	 107 -> 102 ;
	 107 -> 103 ;
106 [label="106:  BinaryOperatorStmt: Assign \n   n$18=*&SIL_temp_conditional___101:class NSString * [line 36]\n  NULLIFY(&SIL_temp_conditional___101,true); [line 36]\n  _fun___objc_retain(n$18:class NSString *) [line 36]\n  n$19=*&__assert_fn__:class NSString * [line 36]\n  *&__assert_fn__:class NSString *=n$18 [line 36]\n  _fun___objc_release(n$19:class NSString *) [line 36]\n  REMOVE_TEMPS(n$18,n$19); [line 36]\n  NULLIFY(&__assert_fn__,false); [line 36]\n " shape="box"]
	

	 106 -> 100 ;
105 [label="105:  ConditinalStmt Branch \n   n$17=_fun_NSString_stringWithUTF8String:(\"<Unknown Function>\":char *) [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___101); [line 36]\n  *&SIL_temp_conditional___101:class NSString *=n$17 [line 36]\n  REMOVE_TEMPS(n$17); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 105 -> 101 ;
104 [label="104:  ConditinalStmt Branch \n   n$16=*&__assert_fn__:class NSString * [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___101); [line 36]\n  *&SIL_temp_conditional___101:class NSString *=n$16 [line 36]\n  REMOVE_TEMPS(n$16); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 104 -> 101 ;
103 [label="103: Prune (false branch) \n   n$15=*&__assert_fn__:class NSString * [line 36]\n  PRUNE((n$15 == 0), false); [line 36]\n  REMOVE_TEMPS(n$15); [line 36]\n " shape="invhouse"]
	

	 103 -> 105 ;
102 [label="102: Prune (true branch) \n   n$15=*&__assert_fn__:class NSString * [line 36]\n  PRUNE((n$15 != 0), true); [line 36]\n  REMOVE_TEMPS(n$15); [line 36]\n " shape="invhouse"]
	

	 102 -> 104 ;
101 [label="101: + \n  " ]
	

	 101 -> 106 ;
100 [label="100:  DeclStmt \n   n$14=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 36]\n  _fun___objc_retain(n$14:class NSString *) [line 36]\n  *&__assert_file__:class NSString *=n$14 [line 36]\n  REMOVE_TEMPS(n$14); [line 36]\n " shape="box"]
	

	 100 -> 95 ;
	 100 -> 96 ;
99 [label="99:  BinaryOperatorStmt: Assign \n   n$12=*&SIL_temp_conditional___94:class NSString * [line 36]\n  NULLIFY(&SIL_temp_conditional___94,true); [line 36]\n  _fun___objc_retain(n$12:class NSString *) [line 36]\n  n$13=*&__assert_file__:class NSString * [line 36]\n  *&__assert_file__:class NSString *=n$12 [line 36]\n  _fun___objc_release(n$13:class NSString *) [line 36]\n  REMOVE_TEMPS(n$12,n$13); [line 36]\n  NULLIFY(&__assert_file__,false); [line 36]\n " shape="box"]
	

	 99 -> 93 ;
98 [label="98:  ConditinalStmt Branch \n   n$11=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___94); [line 36]\n  *&SIL_temp_conditional___94:class NSString *=n$11 [line 36]\n  REMOVE_TEMPS(n$11); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 98 -> 94 ;
97 [label="97:  ConditinalStmt Branch \n   n$10=*&__assert_file__:class NSString * [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___94); [line 36]\n  *&SIL_temp_conditional___94:class NSString *=n$10 [line 36]\n  REMOVE_TEMPS(n$10); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 97 -> 94 ;
96 [label="96: Prune (false branch) \n   n$9=*&__assert_file__:class NSString * [line 36]\n  PRUNE((n$9 == 0), false); [line 36]\n  REMOVE_TEMPS(n$9); [line 36]\n " shape="invhouse"]
	

	 96 -> 98 ;
95 [label="95: Prune (true branch) \n   n$9=*&__assert_file__:class NSString * [line 36]\n  PRUNE((n$9 != 0), true); [line 36]\n  REMOVE_TEMPS(n$9); [line 36]\n " shape="invhouse"]
	

	 95 -> 97 ;
94 [label="94: + \n  " ]
	

	 94 -> 99 ;
93 [label="93:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 93 -> 80 ;
92 [label="92: Prune (false branch) \n   n$3=*&SIL_temp_conditional___86:int  [line 36]\n  NULLIFY(&SIL_temp_conditional___86,true); [line 36]\n  PRUNE((n$3 == 0), false); [line 36]\n  REMOVE_TEMPS(n$3); [line 36]\n " shape="invhouse"]
	

	 92 -> 85 ;
91 [label="91: Prune (true branch) \n   n$3=*&SIL_temp_conditional___86:int  [line 36]\n  NULLIFY(&SIL_temp_conditional___86,true); [line 36]\n  PRUNE((n$3 != 0), true); [line 36]\n  REMOVE_TEMPS(n$3); [line 36]\n  NULLIFY(&target,false); [line 36]\n " shape="invhouse"]
	

	 91 -> 107 ;
90 [label="90:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___86); [line 36]\n  *&SIL_temp_conditional___86:int =1 [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 90 -> 86 ;
89 [label="89:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___86); [line 36]\n  *&SIL_temp_conditional___86:int =0 [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 89 -> 86 ;
88 [label="88: Prune (false branch) \n   n$2=*&target:class A * [line 36]\n  PRUNE((n$2 == 0), false); [line 36]\n  REMOVE_TEMPS(n$2); [line 36]\n " shape="invhouse"]
	

	 88 -> 90 ;
87 [label="87: Prune (true branch) \n   n$2=*&target:class A * [line 36]\n  PRUNE((n$2 != 0), true); [line 36]\n  REMOVE_TEMPS(n$2); [line 36]\n " shape="invhouse"]
	

	 87 -> 89 ;
86 [label="86: + \n  " ]
	

	 86 -> 91 ;
	 86 -> 92 ;
85 [label="85: + \n  " ]
	

	 85 -> 83 ;
	 85 -> 84 ;
84 [label="84: Prune (false branch) \n   PRUNE((0 == 0), false); [line 36]\n " shape="invhouse"]
	

	 84 -> 81 ;
83 [label="83: Prune (true branch) \n   PRUNE((0 != 0), true); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="invhouse"]
	

	 83 -> 82 ;
82 [label="82: + \n  " ]
	

	 82 -> 87 ;
	 82 -> 88 ;
81 [label="81:  Return Stmt \n   n$0=*&target:class A * [line 37]\n  n$1=_fun_A_x(n$0:class A *) [line 37]\n  *&return:int =n$1 [line 37]\n  REMOVE_TEMPS(n$0,n$1); [line 37]\n  NULLIFY(&target,false); [line 37]\n  APPLY_ABSTRACTION; [line 37]\n " shape="box"]
	

	 81 -> 80 ;
80 [label="80: Exit test2 \n  " color=yellow style=filled]
	

79 [label="79: Start test2\nFormals:  target:class A *\nLocals:  __assert_file__:class NSString * __assert_fn__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__,&__assert_fn__); [line 35]\n  NULLIFY(&__assert_file__,false); [line 35]\n  NULLIFY(&__assert_fn__,false); [line 35]\n " color=yellow style=filled]
	

	 79 -> 82 ;
78 [label="78:  DeclStmt \n   n$19=_fun_NSString_stringWithUTF8String:(\"\":char *) [line 31]\n  _fun___objc_retain(n$19:class NSString *) [line 31]\n  *&__assert_fn__:class NSString *=n$19 [line 31]\n  REMOVE_TEMPS(n$19); [line 31]\n " shape="box"]
	

	 78 -> 73 ;
	 78 -> 74 ;
77 [label="77:  BinaryOperatorStmt: Assign \n   n$17=*&SIL_temp_conditional___72:class NSString * [line 31]\n  NULLIFY(&SIL_temp_conditional___72,true); [line 31]\n  _fun___objc_retain(n$17:class NSString *) [line 31]\n  n$18=*&__assert_fn__:class NSString * [line 31]\n  *&__assert_fn__:class NSString *=n$17 [line 31]\n  _fun___objc_release(n$18:class NSString *) [line 31]\n  REMOVE_TEMPS(n$17,n$18); [line 31]\n  NULLIFY(&__assert_fn__,false); [line 31]\n " shape="box"]
	

	 77 -> 71 ;
76 [label="76:  ConditinalStmt Branch \n   n$16=_fun_NSString_stringWithUTF8String:(\"<Unknown Function>\":char *) [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___72); [line 31]\n  *&SIL_temp_conditional___72:class NSString *=n$16 [line 31]\n  REMOVE_TEMPS(n$16); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 76 -> 72 ;
75 [label="75:  ConditinalStmt Branch \n   n$15=*&__assert_fn__:class NSString * [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___72); [line 31]\n  *&SIL_temp_conditional___72:class NSString *=n$15 [line 31]\n  REMOVE_TEMPS(n$15); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 75 -> 72 ;
74 [label="74: Prune (false branch) \n   n$14=*&__assert_fn__:class NSString * [line 31]\n  PRUNE((n$14 == 0), false); [line 31]\n  REMOVE_TEMPS(n$14); [line 31]\n " shape="invhouse"]
	

	 74 -> 76 ;
73 [label="73: Prune (true branch) \n   n$14=*&__assert_fn__:class NSString * [line 31]\n  PRUNE((n$14 != 0), true); [line 31]\n  REMOVE_TEMPS(n$14); [line 31]\n " shape="invhouse"]
	

	 73 -> 75 ;
72 [label="72: + \n  " ]
	

	 72 -> 77 ;
71 [label="71:  DeclStmt \n   n$13=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 31]\n  _fun___objc_retain(n$13:class NSString *) [line 31]\n  *&__assert_file__:class NSString *=n$13 [line 31]\n  REMOVE_TEMPS(n$13); [line 31]\n " shape="box"]
	

	 71 -> 66 ;
	 71 -> 67 ;
70 [label="70:  BinaryOperatorStmt: Assign \n   n$11=*&SIL_temp_conditional___65:class NSString * [line 31]\n  NULLIFY(&SIL_temp_conditional___65,true); [line 31]\n  _fun___objc_retain(n$11:class NSString *) [line 31]\n  n$12=*&__assert_file__:class NSString * [line 31]\n  *&__assert_file__:class NSString *=n$11 [line 31]\n  _fun___objc_release(n$12:class NSString *) [line 31]\n  REMOVE_TEMPS(n$11,n$12); [line 31]\n  NULLIFY(&__assert_file__,false); [line 31]\n " shape="box"]
	

	 70 -> 64 ;
69 [label="69:  ConditinalStmt Branch \n   n$10=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___65); [line 31]\n  *&SIL_temp_conditional___65:class NSString *=n$10 [line 31]\n  REMOVE_TEMPS(n$10); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 69 -> 65 ;
68 [label="68:  ConditinalStmt Branch \n   n$9=*&__assert_file__:class NSString * [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___65); [line 31]\n  *&SIL_temp_conditional___65:class NSString *=n$9 [line 31]\n  REMOVE_TEMPS(n$9); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 68 -> 65 ;
67 [label="67: Prune (false branch) \n   n$8=*&__assert_file__:class NSString * [line 31]\n  PRUNE((n$8 == 0), false); [line 31]\n  REMOVE_TEMPS(n$8); [line 31]\n " shape="invhouse"]
	

	 67 -> 69 ;
66 [label="66: Prune (true branch) \n   n$8=*&__assert_file__:class NSString * [line 31]\n  PRUNE((n$8 != 0), true); [line 31]\n  REMOVE_TEMPS(n$8); [line 31]\n " shape="invhouse"]
	

	 66 -> 68 ;
65 [label="65: + \n  " ]
	

	 65 -> 70 ;
64 [label="64:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 64 -> 50 ;
63 [label="63: Prune (false branch) \n   n$3=*&SIL_temp_conditional___56:int  [line 31]\n  NULLIFY(&SIL_temp_conditional___56,true); [line 31]\n  PRUNE((n$3 == 0), false); [line 31]\n  REMOVE_TEMPS(n$3); [line 31]\n " shape="invhouse"]
	

	 63 -> 55 ;
62 [label="62: Prune (true branch) \n   n$3=*&SIL_temp_conditional___56:int  [line 31]\n  NULLIFY(&SIL_temp_conditional___56,true); [line 31]\n  PRUNE((n$3 != 0), true); [line 31]\n  REMOVE_TEMPS(n$3); [line 31]\n  NULLIFY(&target,false); [line 31]\n " shape="invhouse"]
	

	 62 -> 78 ;
61 [label="61:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___56); [line 31]\n  *&SIL_temp_conditional___56:int =1 [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 61 -> 56 ;
60 [label="60:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___56); [line 31]\n  *&SIL_temp_conditional___56:int =0 [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 60 -> 56 ;
59 [label="59: Prune (false branch) \n   PRUNE(((n$2 != (void *)0) == 0), false); [line 31]\n  REMOVE_TEMPS(n$2); [line 31]\n " shape="invhouse"]
	

	 59 -> 61 ;
58 [label="58: Prune (true branch) \n   PRUNE(((n$2 != (void *)0) != 0), true); [line 31]\n  REMOVE_TEMPS(n$2); [line 31]\n " shape="invhouse"]
	

	 58 -> 60 ;
57 [label="57:  BinaryOperatorStmt: NE \n   n$2=*&target:class A * [line 31]\n " shape="box"]
	

	 57 -> 58 ;
	 57 -> 59 ;
56 [label="56: + \n  " ]
	

	 56 -> 62 ;
	 56 -> 63 ;
55 [label="55: + \n  " ]
	

	 55 -> 53 ;
	 55 -> 54 ;
54 [label="54: Prune (false branch) \n   PRUNE((0 == 0), false); [line 31]\n " shape="invhouse"]
	

	 54 -> 51 ;
53 [label="53: Prune (true branch) \n   PRUNE((0 != 0), true); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="invhouse"]
	

	 53 -> 52 ;
52 [label="52: + \n  " ]
	

	 52 -> 57 ;
51 [label="51:  Return Stmt \n   n$0=*&target:class A * [line 32]\n  n$1=_fun_A_x(n$0:class A *) [line 32]\n  *&return:int =n$1 [line 32]\n  REMOVE_TEMPS(n$0,n$1); [line 32]\n  NULLIFY(&target,false); [line 32]\n  APPLY_ABSTRACTION; [line 32]\n " shape="box"]
	

	 51 -> 50 ;
50 [label="50: Exit test1 \n  " color=yellow style=filled]
	

49 [label="49: Start test1\nFormals:  target:class A *\nLocals:  __assert_file__:class NSString * __assert_fn__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__,&__assert_fn__); [line 30]\n  NULLIFY(&__assert_file__,false); [line 30]\n  NULLIFY(&__assert_fn__,false); [line 30]\n " color=yellow style=filled]
	

	 49 -> 52 ;
48 [label="48:  DeclStmt \n   n$29=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 24]\n  _fun___objc_retain(n$29:class NSString *) [line 24]\n  *&__assert_file__:class NSString *=n$29 [line 24]\n  REMOVE_TEMPS(n$29); [line 24]\n " shape="box"]
	

	 48 -> 43 ;
	 48 -> 44 ;
47 [label="47:  BinaryOperatorStmt: Assign \n   n$27=*&SIL_temp_conditional___42:class NSString * [line 24]\n  NULLIFY(&SIL_temp_conditional___42,true); [line 24]\n  _fun___objc_retain(n$27:class NSString *) [line 24]\n  n$28=*&__assert_file__:class NSString * [line 24]\n  *&__assert_file__:class NSString *=n$27 [line 24]\n  _fun___objc_release(n$28:class NSString *) [line 24]\n  REMOVE_TEMPS(n$27,n$28); [line 24]\n  NULLIFY(&__assert_file__,false); [line 24]\n " shape="box"]
	

	 47 -> 41 ;
46 [label="46:  ConditinalStmt Branch \n   n$26=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 24]\n  DECLARE_LOCALS(&SIL_temp_conditional___42); [line 24]\n  *&SIL_temp_conditional___42:class NSString *=n$26 [line 24]\n  REMOVE_TEMPS(n$26); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 46 -> 42 ;
45 [label="45:  ConditinalStmt Branch \n   n$25=*&__assert_file__:class NSString * [line 24]\n  DECLARE_LOCALS(&SIL_temp_conditional___42); [line 24]\n  *&SIL_temp_conditional___42:class NSString *=n$25 [line 24]\n  REMOVE_TEMPS(n$25); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 45 -> 42 ;
44 [label="44: Prune (false branch) \n   n$24=*&__assert_file__:class NSString * [line 24]\n  PRUNE((n$24 == 0), false); [line 24]\n  REMOVE_TEMPS(n$24); [line 24]\n " shape="invhouse"]
	

	 44 -> 46 ;
43 [label="43: Prune (true branch) \n   n$24=*&__assert_file__:class NSString * [line 24]\n  PRUNE((n$24 != 0), true); [line 24]\n  REMOVE_TEMPS(n$24); [line 24]\n " shape="invhouse"]
	

	 43 -> 45 ;
42 [label="42: + \n  " ]
	

	 42 -> 47 ;
41 [label="41:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 41 -> 27 ;
40 [label="40: Prune (false branch) \n   n$18=*&SIL_temp_conditional___33:int  [line 24]\n  NULLIFY(&SIL_temp_conditional___33,true); [line 24]\n  PRUNE((n$18 == 0), false); [line 24]\n  REMOVE_TEMPS(n$18); [line 24]\n " shape="invhouse"]
	

	 40 -> 32 ;
39 [label="39: Prune (true branch) \n   n$18=*&SIL_temp_conditional___33:int  [line 24]\n  NULLIFY(&SIL_temp_conditional___33,true); [line 24]\n  PRUNE((n$18 != 0), true); [line 24]\n  REMOVE_TEMPS(n$18); [line 24]\n  NULLIFY(&a,false); [line 24]\n " shape="invhouse"]
	

	 39 -> 48 ;
38 [label="38:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___33); [line 24]\n  *&SIL_temp_conditional___33:int =1 [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 38 -> 33 ;
37 [label="37:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___33); [line 24]\n  *&SIL_temp_conditional___33:int =0 [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 37 -> 33 ;
36 [label="36: Prune (false branch) \n   PRUNE(((n$17 != (void *)0) == 0), false); [line 24]\n  REMOVE_TEMPS(n$17); [line 24]\n " shape="invhouse"]
	

	 36 -> 38 ;
35 [label="35: Prune (true branch) \n   PRUNE(((n$17 != (void *)0) != 0), true); [line 24]\n  REMOVE_TEMPS(n$17); [line 24]\n " shape="invhouse"]
	

	 35 -> 37 ;
34 [label="34:  BinaryOperatorStmt: NE \n   n$17=*&a:class A * [line 24]\n " shape="box"]
	

	 34 -> 35 ;
	 34 -> 36 ;
33 [label="33: + \n  " ]
	

	 33 -> 39 ;
	 33 -> 40 ;
32 [label="32: + \n  " ]
	

	 32 -> 30 ;
	 32 -> 31 ;
31 [label="31: Prune (false branch) \n   PRUNE((0 == 0), false); [line 24]\n " shape="invhouse"]
	

	 31 -> 28 ;
30 [label="30: Prune (true branch) \n   PRUNE((0 != 0), true); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="invhouse"]
	

	 30 -> 29 ;
29 [label="29: + \n  " ]
	

	 29 -> 34 ;
28 [label="28:  Return Stmt \n   n$15=*&a:class A * [line 25]\n  n$16=_fun_A_x(n$15:class A *) [line 25]\n  *&return:int =n$16 [line 25]\n  REMOVE_TEMPS(n$15,n$16); [line 25]\n  NULLIFY(&a,false); [line 25]\n  APPLY_ABSTRACTION; [line 25]\n " shape="box"]
	

	 28 -> 27 ;
27 [label="27: Exit A_initWithRequest: \n  " color=yellow style=filled]
	

26 [label="26: Start A_initWithRequest:\nFormals:  self:class A * a:class A *\nLocals:  __assert_file__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__); [line 23]\n  NULLIFY(&__assert_file__,false); [line 23]\n  NULLIFY(&self,false); [line 23]\n " color=yellow style=filled]
	

	 26 -> 29 ;
25 [label="25:  DeclStmt \n   n$14=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 19]\n  _fun___objc_retain(n$14:class NSString *) [line 19]\n  *&__assert_file__:class NSString *=n$14 [line 19]\n  REMOVE_TEMPS(n$14); [line 19]\n " shape="box"]
	

	 25 -> 20 ;
	 25 -> 21 ;
24 [label="24:  BinaryOperatorStmt: Assign \n   n$12=*&SIL_temp_conditional___19:class NSString * [line 19]\n  NULLIFY(&SIL_temp_conditional___19,true); [line 19]\n  _fun___objc_retain(n$12:class NSString *) [line 19]\n  n$13=*&__assert_file__:class NSString * [line 19]\n  *&__assert_file__:class NSString *=n$12 [line 19]\n  _fun___objc_release(n$13:class NSString *) [line 19]\n  REMOVE_TEMPS(n$12,n$13); [line 19]\n  NULLIFY(&__assert_file__,false); [line 19]\n " shape="box"]
	

	 24 -> 18 ;
23 [label="23:  ConditinalStmt Branch \n   n$11=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 19]\n  DECLARE_LOCALS(&SIL_temp_conditional___19); [line 19]\n  *&SIL_temp_conditional___19:class NSString *=n$11 [line 19]\n  REMOVE_TEMPS(n$11); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 23 -> 19 ;
22 [label="22:  ConditinalStmt Branch \n   n$10=*&__assert_file__:class NSString * [line 19]\n  DECLARE_LOCALS(&SIL_temp_conditional___19); [line 19]\n  *&SIL_temp_conditional___19:class NSString *=n$10 [line 19]\n  REMOVE_TEMPS(n$10); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 22 -> 19 ;
21 [label="21: Prune (false branch) \n   n$9=*&__assert_file__:class NSString * [line 19]\n  PRUNE((n$9 == 0), false); [line 19]\n  REMOVE_TEMPS(n$9); [line 19]\n " shape="invhouse"]
	

	 21 -> 23 ;
20 [label="20: Prune (true branch) \n   n$9=*&__assert_file__:class NSString * [line 19]\n  PRUNE((n$9 != 0), true); [line 19]\n  REMOVE_TEMPS(n$9); [line 19]\n " shape="invhouse"]
	

	 20 -> 22 ;
19 [label="19: + \n  " ]
	

	 19 -> 24 ;
18 [label="18:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 18 -> 4 ;
17 [label="17: Prune (false branch) \n   n$3=*&SIL_temp_conditional___10:int  [line 19]\n  NULLIFY(&SIL_temp_conditional___10,true); [line 19]\n  PRUNE((n$3 == 0), false); [line 19]\n  REMOVE_TEMPS(n$3); [line 19]\n " shape="invhouse"]
	

	 17 -> 9 ;
16 [label="16: Prune (true branch) \n   n$3=*&SIL_temp_conditional___10:int  [line 19]\n  NULLIFY(&SIL_temp_conditional___10,true); [line 19]\n  PRUNE((n$3 != 0), true); [line 19]\n  REMOVE_TEMPS(n$3); [line 19]\n  NULLIFY(&target,false); [line 19]\n " shape="invhouse"]
	

	 16 -> 25 ;
15 [label="15:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___10); [line 19]\n  *&SIL_temp_conditional___10:int =1 [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 15 -> 10 ;
14 [label="14:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___10); [line 19]\n  *&SIL_temp_conditional___10:int =0 [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 14 -> 10 ;
13 [label="13: Prune (false branch) \n   PRUNE(((n$2 != (void *)0) == 0), false); [line 19]\n  REMOVE_TEMPS(n$2); [line 19]\n " shape="invhouse"]
	

	 13 -> 15 ;
12 [label="12: Prune (true branch) \n   PRUNE(((n$2 != (void *)0) != 0), true); [line 19]\n  REMOVE_TEMPS(n$2); [line 19]\n " shape="invhouse"]
	

	 12 -> 14 ;
11 [label="11:  BinaryOperatorStmt: NE \n   n$2=*&target:class A * [line 19]\n " shape="box"]
	

	 11 -> 12 ;
	 11 -> 13 ;
10 [label="10: + \n  " ]
	

	 10 -> 16 ;
	 10 -> 17 ;
9 [label="9: + \n  " ]
	

	 9 -> 7 ;
	 9 -> 8 ;
8 [label="8: Prune (false branch) \n   PRUNE((0 == 0), false); [line 19]\n " shape="invhouse"]
	

	 8 -> 5 ;
7 [label="7: Prune (true branch) \n   PRUNE((0 != 0), true); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="invhouse"]
	

	 7 -> 6 ;
6 [label="6: + \n  " ]
	

	 6 -> 11 ;
5 [label="5:  Return Stmt \n   n$0=*&target:class A * [line 20]\n  n$1=_fun_A_x(n$0:class A *) [line 20]\n  *&return:int =n$1 [line 20]\n  REMOVE_TEMPS(n$0,n$1); [line 20]\n  NULLIFY(&target,false); [line 20]\n  APPLY_ABSTRACTION; [line 20]\n " shape="box"]
	

	 5 -> 4 ;
4 [label="4: Exit A_addTarget: \n  " color=yellow style=filled]
	

3 [label="3: Start A_addTarget:\nFormals:  self:class A * target:class A *\nLocals:  __assert_file__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__); [line 18]\n  NULLIFY(&__assert_file__,false); [line 18]\n  NULLIFY(&self,false); [line 18]\n " color=yellow style=filled]
	

	 3 -> 6 ;
2 [label="2: Exit A_frontendChecks \n  " color=yellow style=filled]
	

1 [label="1: Start A_frontendChecks\nFormals: \nLocals:  \n  " color=yellow style=filled]
	

	 1 -> 2 ;
}
