digraph iCFG {
123 [label="123:  DeclStmt \n   n$22=_fun_NSString_stringWithUTF8String:(\"\":char *) [line 36]\n  _fun___objc_retain(n$22:class NSString *) [line 36]\n  *&__assert_fn__:class NSString *=n$22 [line 36]\n  REMOVE_TEMPS(n$22); [line 36]\n " shape="box"]
	

	 123 -> 118 ;
	 123 -> 119 ;
122 [label="122:  BinaryOperatorStmt: Assign \n   n$20=*&SIL_temp_conditional___117:class NSString * [line 36]\n  NULLIFY(&SIL_temp_conditional___117,true); [line 36]\n  _fun___objc_retain(n$20:class NSString *) [line 36]\n  n$21=*&__assert_fn__:class NSString * [line 36]\n  *&__assert_fn__:class NSString *=n$20 [line 36]\n  _fun___objc_release(n$21:class NSString *) [line 36]\n  REMOVE_TEMPS(n$20,n$21); [line 36]\n  NULLIFY(&__assert_fn__,false); [line 36]\n " shape="box"]
	

	 122 -> 116 ;
121 [label="121:  Message Call: stringWithUTF8String: \n   n$19=_fun_NSString_stringWithUTF8String:(\"<Unknown Function>\":char *) [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___117); [line 36]\n  *&SIL_temp_conditional___117:class NSString *=n$19 [line 36]\n  REMOVE_TEMPS(n$19); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 121 -> 117 ;
120 [label="120:  ConditinalStmt Branch \n   n$18=*&__assert_fn__:class NSString * [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___117); [line 36]\n  *&SIL_temp_conditional___117:class NSString *=n$18 [line 36]\n  REMOVE_TEMPS(n$18); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 120 -> 117 ;
119 [label="119: Prune (false branch) \n   n$17=*&__assert_fn__:class NSString * [line 36]\n  PRUNE((n$17 == 0), false); [line 36]\n  REMOVE_TEMPS(n$17); [line 36]\n " shape="invhouse"]
	

	 119 -> 121 ;
118 [label="118: Prune (true branch) \n   n$17=*&__assert_fn__:class NSString * [line 36]\n  PRUNE((n$17 != 0), true); [line 36]\n  REMOVE_TEMPS(n$17); [line 36]\n " shape="invhouse"]
	

	 118 -> 120 ;
117 [label="117: + \n  " ]
	

	 117 -> 122 ;
116 [label="116:  DeclStmt \n   n$16=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 36]\n  _fun___objc_retain(n$16:class NSString *) [line 36]\n  *&__assert_file__:class NSString *=n$16 [line 36]\n  REMOVE_TEMPS(n$16); [line 36]\n " shape="box"]
	

	 116 -> 111 ;
	 116 -> 112 ;
115 [label="115:  BinaryOperatorStmt: Assign \n   n$14=*&SIL_temp_conditional___110:class NSString * [line 36]\n  NULLIFY(&SIL_temp_conditional___110,true); [line 36]\n  _fun___objc_retain(n$14:class NSString *) [line 36]\n  n$15=*&__assert_file__:class NSString * [line 36]\n  *&__assert_file__:class NSString *=n$14 [line 36]\n  _fun___objc_release(n$15:class NSString *) [line 36]\n  REMOVE_TEMPS(n$14,n$15); [line 36]\n  NULLIFY(&__assert_file__,false); [line 36]\n " shape="box"]
	

	 115 -> 109 ;
114 [label="114:  Message Call: stringWithUTF8String: \n   n$13=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___110); [line 36]\n  *&SIL_temp_conditional___110:class NSString *=n$13 [line 36]\n  REMOVE_TEMPS(n$13); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 114 -> 110 ;
113 [label="113:  ConditinalStmt Branch \n   n$12=*&__assert_file__:class NSString * [line 36]\n  DECLARE_LOCALS(&SIL_temp_conditional___110); [line 36]\n  *&SIL_temp_conditional___110:class NSString *=n$12 [line 36]\n  REMOVE_TEMPS(n$12); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 113 -> 110 ;
112 [label="112: Prune (false branch) \n   n$11=*&__assert_file__:class NSString * [line 36]\n  PRUNE((n$11 == 0), false); [line 36]\n  REMOVE_TEMPS(n$11); [line 36]\n " shape="invhouse"]
	

	 112 -> 114 ;
111 [label="111: Prune (true branch) \n   n$11=*&__assert_file__:class NSString * [line 36]\n  PRUNE((n$11 != 0), true); [line 36]\n  REMOVE_TEMPS(n$11); [line 36]\n " shape="invhouse"]
	

	 111 -> 113 ;
110 [label="110: + \n  " ]
	

	 110 -> 115 ;
109 [label="109:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 109 -> 93 ;
108 [label="108: Prune (false branch) \n   n$5=*&SIL_temp_conditional___102:int  [line 38]\n  NULLIFY(&SIL_temp_conditional___102,true); [line 38]\n  PRUNE((n$5 == 0), false); [line 38]\n  REMOVE_TEMPS(n$5); [line 38]\n " shape="invhouse"]
	

	 108 -> 101 ;
107 [label="107: Prune (true branch) \n   n$5=*&SIL_temp_conditional___102:int  [line 38]\n  NULLIFY(&SIL_temp_conditional___102,true); [line 38]\n  PRUNE((n$5 != 0), true); [line 38]\n  REMOVE_TEMPS(n$5); [line 38]\n  NULLIFY(&target,false); [line 38]\n " shape="invhouse"]
	

	 107 -> 123 ;
106 [label="106:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___102); [line 38]\n  *&SIL_temp_conditional___102:int =1 [line 38]\n  APPLY_ABSTRACTION; [line 38]\n " shape="box"]
	

	 106 -> 102 ;
105 [label="105:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___102); [line 38]\n  *&SIL_temp_conditional___102:int =0 [line 38]\n  APPLY_ABSTRACTION; [line 38]\n " shape="box"]
	

	 105 -> 102 ;
104 [label="104: Prune (false branch) \n   n$4=*&target:class A * [line 38]\n  PRUNE((n$4 == 0), false); [line 38]\n  REMOVE_TEMPS(n$4); [line 38]\n " shape="invhouse"]
	

	 104 -> 106 ;
103 [label="103: Prune (true branch) \n   n$4=*&target:class A * [line 38]\n  PRUNE((n$4 != 0), true); [line 38]\n  REMOVE_TEMPS(n$4); [line 38]\n " shape="invhouse"]
	

	 103 -> 105 ;
102 [label="102: + \n  " ]
	

	 102 -> 107 ;
	 102 -> 108 ;
101 [label="101: + \n  " ]
	

	 101 -> 99 ;
	 101 -> 100 ;
100 [label="100: Prune (false branch) \n   PRUNE((0 == 0), false); [line 36]\n " shape="invhouse"]
	

	 100 -> 97 ;
99 [label="99: Prune (true branch) \n   PRUNE((0 != 0), true); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="invhouse"]
	

	 99 -> 98 ;
98 [label="98: + \n  " ]
	

	 98 -> 103 ;
	 98 -> 104 ;
97 [label="97:  Return Stmt \n   n$1=*&target:class A * [line 37]\n  n$0=_fun_A_x(n$1:class A *) virtual [line 37]\n  *&return:int =n$0 [line 37]\n  REMOVE_TEMPS(n$0,n$1); [line 37]\n  NULLIFY(&target,false); [line 37]\n  APPLY_ABSTRACTION; [line 37]\n " shape="box"]
	

	 97 -> 93 ;
96 [label="96:  Return Stmt \n   n$2=*&self:class A * [line 13]\n  n$3=*n$2._x:int  [line 13]\n  *&return:int =n$3 [line 13]\n  REMOVE_TEMPS(n$2,n$3); [line 13]\n  NULLIFY(&self,false); [line 13]\n  APPLY_ABSTRACTION; [line 13]\n " shape="box"]
	

	 96 -> 95 ;
95 [label="95: Exit A_x \n  " color=yellow style=filled]
	

94 [label="94: Start A_x (generated)\nFormals:  self:class A *\nLocals:  \n   DECLARE_LOCALS(&return); [line 13]\n " color=yellow style=filled]
	

	 94 -> 96 ;
93 [label="93: Exit test2 \n  " color=yellow style=filled]
	

92 [label="92: Start test2\nFormals:  target:class A *\nLocals:  __assert_file__:class NSString * __assert_fn__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__,&__assert_fn__); [line 35]\n  NULLIFY(&__assert_file__,false); [line 35]\n  NULLIFY(&__assert_fn__,false); [line 35]\n " color=yellow style=filled]
	

	 92 -> 98 ;
91 [label="91:  DeclStmt \n   n$21=_fun_NSString_stringWithUTF8String:(\"\":char *) [line 31]\n  _fun___objc_retain(n$21:class NSString *) [line 31]\n  *&__assert_fn__:class NSString *=n$21 [line 31]\n  REMOVE_TEMPS(n$21); [line 31]\n " shape="box"]
	

	 91 -> 86 ;
	 91 -> 87 ;
90 [label="90:  BinaryOperatorStmt: Assign \n   n$19=*&SIL_temp_conditional___85:class NSString * [line 31]\n  NULLIFY(&SIL_temp_conditional___85,true); [line 31]\n  _fun___objc_retain(n$19:class NSString *) [line 31]\n  n$20=*&__assert_fn__:class NSString * [line 31]\n  *&__assert_fn__:class NSString *=n$19 [line 31]\n  _fun___objc_release(n$20:class NSString *) [line 31]\n  REMOVE_TEMPS(n$19,n$20); [line 31]\n  NULLIFY(&__assert_fn__,false); [line 31]\n " shape="box"]
	

	 90 -> 84 ;
89 [label="89:  Message Call: stringWithUTF8String: \n   n$18=_fun_NSString_stringWithUTF8String:(\"<Unknown Function>\":char *) [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___85); [line 31]\n  *&SIL_temp_conditional___85:class NSString *=n$18 [line 31]\n  REMOVE_TEMPS(n$18); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 89 -> 85 ;
88 [label="88:  ConditinalStmt Branch \n   n$17=*&__assert_fn__:class NSString * [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___85); [line 31]\n  *&SIL_temp_conditional___85:class NSString *=n$17 [line 31]\n  REMOVE_TEMPS(n$17); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 88 -> 85 ;
87 [label="87: Prune (false branch) \n   n$16=*&__assert_fn__:class NSString * [line 31]\n  PRUNE((n$16 == 0), false); [line 31]\n  REMOVE_TEMPS(n$16); [line 31]\n " shape="invhouse"]
	

	 87 -> 89 ;
86 [label="86: Prune (true branch) \n   n$16=*&__assert_fn__:class NSString * [line 31]\n  PRUNE((n$16 != 0), true); [line 31]\n  REMOVE_TEMPS(n$16); [line 31]\n " shape="invhouse"]
	

	 86 -> 88 ;
85 [label="85: + \n  " ]
	

	 85 -> 90 ;
84 [label="84:  DeclStmt \n   n$15=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 31]\n  _fun___objc_retain(n$15:class NSString *) [line 31]\n  *&__assert_file__:class NSString *=n$15 [line 31]\n  REMOVE_TEMPS(n$15); [line 31]\n " shape="box"]
	

	 84 -> 79 ;
	 84 -> 80 ;
83 [label="83:  BinaryOperatorStmt: Assign \n   n$13=*&SIL_temp_conditional___78:class NSString * [line 31]\n  NULLIFY(&SIL_temp_conditional___78,true); [line 31]\n  _fun___objc_retain(n$13:class NSString *) [line 31]\n  n$14=*&__assert_file__:class NSString * [line 31]\n  *&__assert_file__:class NSString *=n$13 [line 31]\n  _fun___objc_release(n$14:class NSString *) [line 31]\n  REMOVE_TEMPS(n$13,n$14); [line 31]\n  NULLIFY(&__assert_file__,false); [line 31]\n " shape="box"]
	

	 83 -> 77 ;
82 [label="82:  Message Call: stringWithUTF8String: \n   n$12=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___78); [line 31]\n  *&SIL_temp_conditional___78:class NSString *=n$12 [line 31]\n  REMOVE_TEMPS(n$12); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 82 -> 78 ;
81 [label="81:  ConditinalStmt Branch \n   n$11=*&__assert_file__:class NSString * [line 31]\n  DECLARE_LOCALS(&SIL_temp_conditional___78); [line 31]\n  *&SIL_temp_conditional___78:class NSString *=n$11 [line 31]\n  REMOVE_TEMPS(n$11); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 81 -> 78 ;
80 [label="80: Prune (false branch) \n   n$10=*&__assert_file__:class NSString * [line 31]\n  PRUNE((n$10 == 0), false); [line 31]\n  REMOVE_TEMPS(n$10); [line 31]\n " shape="invhouse"]
	

	 80 -> 82 ;
79 [label="79: Prune (true branch) \n   n$10=*&__assert_file__:class NSString * [line 31]\n  PRUNE((n$10 != 0), true); [line 31]\n  REMOVE_TEMPS(n$10); [line 31]\n " shape="invhouse"]
	

	 79 -> 81 ;
78 [label="78: + \n  " ]
	

	 78 -> 83 ;
77 [label="77:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="box"]
	

	 77 -> 60 ;
76 [label="76: Prune (false branch) \n   n$5=*&SIL_temp_conditional___69:int  [line 33]\n  NULLIFY(&SIL_temp_conditional___69,true); [line 33]\n  PRUNE((n$5 == 0), false); [line 33]\n  REMOVE_TEMPS(n$5); [line 33]\n " shape="invhouse"]
	

	 76 -> 68 ;
75 [label="75: Prune (true branch) \n   n$5=*&SIL_temp_conditional___69:int  [line 33]\n  NULLIFY(&SIL_temp_conditional___69,true); [line 33]\n  PRUNE((n$5 != 0), true); [line 33]\n  REMOVE_TEMPS(n$5); [line 33]\n  NULLIFY(&target,false); [line 33]\n " shape="invhouse"]
	

	 75 -> 91 ;
74 [label="74:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___69); [line 33]\n  *&SIL_temp_conditional___69:int =1 [line 33]\n  APPLY_ABSTRACTION; [line 33]\n " shape="box"]
	

	 74 -> 69 ;
73 [label="73:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___69); [line 33]\n  *&SIL_temp_conditional___69:int =0 [line 33]\n  APPLY_ABSTRACTION; [line 33]\n " shape="box"]
	

	 73 -> 69 ;
72 [label="72: Prune (false branch) \n   PRUNE(((n$4 != (void *)0) == 0), false); [line 31]\n  REMOVE_TEMPS(n$4); [line 31]\n " shape="invhouse"]
	

	 72 -> 74 ;
71 [label="71: Prune (true branch) \n   PRUNE(((n$4 != (void *)0) != 0), true); [line 31]\n  REMOVE_TEMPS(n$4); [line 31]\n " shape="invhouse"]
	

	 71 -> 73 ;
70 [label="70:  BinaryOperatorStmt: NE \n   n$4=*&target:class A * [line 31]\n " shape="box"]
	

	 70 -> 71 ;
	 70 -> 72 ;
69 [label="69: + \n  " ]
	

	 69 -> 75 ;
	 69 -> 76 ;
68 [label="68: + \n  " ]
	

	 68 -> 66 ;
	 68 -> 67 ;
67 [label="67: Prune (false branch) \n   PRUNE((0 == 0), false); [line 31]\n " shape="invhouse"]
	

	 67 -> 64 ;
66 [label="66: Prune (true branch) \n   PRUNE((0 != 0), true); [line 31]\n  APPLY_ABSTRACTION; [line 31]\n " shape="invhouse"]
	

	 66 -> 65 ;
65 [label="65: + \n  " ]
	

	 65 -> 70 ;
64 [label="64:  Return Stmt \n   n$1=*&target:class A * [line 32]\n  n$0=_fun_A_x(n$1:class A *) virtual [line 32]\n  *&return:int =n$0 [line 32]\n  REMOVE_TEMPS(n$0,n$1); [line 32]\n  NULLIFY(&target,false); [line 32]\n  APPLY_ABSTRACTION; [line 32]\n " shape="box"]
	

	 64 -> 60 ;
60 [label="60: Exit test1 \n  " color=yellow style=filled]
	

59 [label="59: Start test1\nFormals:  target:class A *\nLocals:  __assert_file__:class NSString * __assert_fn__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__,&__assert_fn__); [line 30]\n  NULLIFY(&__assert_file__,false); [line 30]\n  NULLIFY(&__assert_fn__,false); [line 30]\n " color=yellow style=filled]
	

	 59 -> 65 ;
58 [label="58:  BinaryOperatorStmt: Assign \n   n$36=*&self:class A * [line 13]\n  n$37=*&x:int  [line 13]\n  *n$36._x:int =n$37 [line 13]\n  REMOVE_TEMPS(n$36,n$37); [line 13]\n  NULLIFY(&self,false); [line 13]\n  NULLIFY(&x,false); [line 13]\n  APPLY_ABSTRACTION; [line 13]\n " shape="box"]
	

	 58 -> 57 ;
57 [label="57: Exit A_setX: \n  " color=yellow style=filled]
	

56 [label="56: Start A_setX: (generated)\nFormals:  self:class A * x:int \nLocals:  \n   DECLARE_LOCALS(&return); [line 13]\n " color=yellow style=filled]
	

	 56 -> 58 ;
52 [label="52:  DeclStmt \n   n$33=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 24]\n  _fun___objc_retain(n$33:class NSString *) [line 24]\n  *&__assert_file__:class NSString *=n$33 [line 24]\n  REMOVE_TEMPS(n$33); [line 24]\n " shape="box"]
	

	 52 -> 47 ;
	 52 -> 48 ;
51 [label="51:  BinaryOperatorStmt: Assign \n   n$31=*&SIL_temp_conditional___46:class NSString * [line 24]\n  NULLIFY(&SIL_temp_conditional___46,true); [line 24]\n  _fun___objc_retain(n$31:class NSString *) [line 24]\n  n$32=*&__assert_file__:class NSString * [line 24]\n  *&__assert_file__:class NSString *=n$31 [line 24]\n  _fun___objc_release(n$32:class NSString *) [line 24]\n  REMOVE_TEMPS(n$31,n$32); [line 24]\n  NULLIFY(&__assert_file__,false); [line 24]\n " shape="box"]
	

	 51 -> 45 ;
50 [label="50:  Message Call: stringWithUTF8String: \n   n$30=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 24]\n  DECLARE_LOCALS(&SIL_temp_conditional___46); [line 24]\n  *&SIL_temp_conditional___46:class NSString *=n$30 [line 24]\n  REMOVE_TEMPS(n$30); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 50 -> 46 ;
49 [label="49:  ConditinalStmt Branch \n   n$29=*&__assert_file__:class NSString * [line 24]\n  DECLARE_LOCALS(&SIL_temp_conditional___46); [line 24]\n  *&SIL_temp_conditional___46:class NSString *=n$29 [line 24]\n  REMOVE_TEMPS(n$29); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 49 -> 46 ;
48 [label="48: Prune (false branch) \n   n$28=*&__assert_file__:class NSString * [line 24]\n  PRUNE((n$28 == 0), false); [line 24]\n  REMOVE_TEMPS(n$28); [line 24]\n " shape="invhouse"]
	

	 48 -> 50 ;
47 [label="47: Prune (true branch) \n   n$28=*&__assert_file__:class NSString * [line 24]\n  PRUNE((n$28 != 0), true); [line 24]\n  REMOVE_TEMPS(n$28); [line 24]\n " shape="invhouse"]
	

	 47 -> 49 ;
46 [label="46: + \n  " ]
	

	 46 -> 51 ;
45 [label="45:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="box"]
	

	 45 -> 28 ;
44 [label="44: Prune (false branch) \n   n$22=*&SIL_temp_conditional___37:int  [line 26]\n  NULLIFY(&SIL_temp_conditional___37,true); [line 26]\n  PRUNE((n$22 == 0), false); [line 26]\n  REMOVE_TEMPS(n$22); [line 26]\n " shape="invhouse"]
	

	 44 -> 36 ;
43 [label="43: Prune (true branch) \n   n$22=*&SIL_temp_conditional___37:int  [line 26]\n  NULLIFY(&SIL_temp_conditional___37,true); [line 26]\n  PRUNE((n$22 != 0), true); [line 26]\n  REMOVE_TEMPS(n$22); [line 26]\n  NULLIFY(&a,false); [line 26]\n " shape="invhouse"]
	

	 43 -> 52 ;
42 [label="42:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___37); [line 26]\n  *&SIL_temp_conditional___37:int =1 [line 26]\n  APPLY_ABSTRACTION; [line 26]\n " shape="box"]
	

	 42 -> 37 ;
41 [label="41:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___37); [line 26]\n  *&SIL_temp_conditional___37:int =0 [line 26]\n  APPLY_ABSTRACTION; [line 26]\n " shape="box"]
	

	 41 -> 37 ;
40 [label="40: Prune (false branch) \n   PRUNE(((n$21 != (void *)0) == 0), false); [line 24]\n  REMOVE_TEMPS(n$21); [line 24]\n " shape="invhouse"]
	

	 40 -> 42 ;
39 [label="39: Prune (true branch) \n   PRUNE(((n$21 != (void *)0) != 0), true); [line 24]\n  REMOVE_TEMPS(n$21); [line 24]\n " shape="invhouse"]
	

	 39 -> 41 ;
38 [label="38:  BinaryOperatorStmt: NE \n   n$21=*&a:class A * [line 24]\n " shape="box"]
	

	 38 -> 39 ;
	 38 -> 40 ;
37 [label="37: + \n  " ]
	

	 37 -> 43 ;
	 37 -> 44 ;
36 [label="36: + \n  " ]
	

	 36 -> 34 ;
	 36 -> 35 ;
35 [label="35: Prune (false branch) \n   PRUNE((0 == 0), false); [line 24]\n " shape="invhouse"]
	

	 35 -> 32 ;
34 [label="34: Prune (true branch) \n   PRUNE((0 != 0), true); [line 24]\n  APPLY_ABSTRACTION; [line 24]\n " shape="invhouse"]
	

	 34 -> 33 ;
33 [label="33: + \n  " ]
	

	 33 -> 38 ;
32 [label="32:  Return Stmt \n   n$18=*&a:class A * [line 25]\n  n$17=_fun_A_x(n$18:class A *) virtual [line 25]\n  *&return:int =n$17 [line 25]\n  REMOVE_TEMPS(n$17,n$18); [line 25]\n  NULLIFY(&a,false); [line 25]\n  APPLY_ABSTRACTION; [line 25]\n " shape="box"]
	

	 32 -> 28 ;
28 [label="28: Exit A_initWithRequest: \n  " color=yellow style=filled]
	

27 [label="27: Start A_initWithRequest:\nFormals:  self:class A * a:class A *\nLocals:  __assert_file__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__); [line 23]\n  NULLIFY(&__assert_file__,false); [line 23]\n  NULLIFY(&self,false); [line 23]\n " color=yellow style=filled]
	

	 27 -> 33 ;
26 [label="26:  DeclStmt \n   n$16=_fun_NSString_stringWithUTF8String:(\"infer/tests/codetoanalyze/objc/frontend/assertions/NSAssert_example.m\":char *) [line 19]\n  _fun___objc_retain(n$16:class NSString *) [line 19]\n  *&__assert_file__:class NSString *=n$16 [line 19]\n  REMOVE_TEMPS(n$16); [line 19]\n " shape="box"]
	

	 26 -> 21 ;
	 26 -> 22 ;
25 [label="25:  BinaryOperatorStmt: Assign \n   n$14=*&SIL_temp_conditional___20:class NSString * [line 19]\n  NULLIFY(&SIL_temp_conditional___20,true); [line 19]\n  _fun___objc_retain(n$14:class NSString *) [line 19]\n  n$15=*&__assert_file__:class NSString * [line 19]\n  *&__assert_file__:class NSString *=n$14 [line 19]\n  _fun___objc_release(n$15:class NSString *) [line 19]\n  REMOVE_TEMPS(n$14,n$15); [line 19]\n  NULLIFY(&__assert_file__,false); [line 19]\n " shape="box"]
	

	 25 -> 19 ;
24 [label="24:  Message Call: stringWithUTF8String: \n   n$13=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 19]\n  DECLARE_LOCALS(&SIL_temp_conditional___20); [line 19]\n  *&SIL_temp_conditional___20:class NSString *=n$13 [line 19]\n  REMOVE_TEMPS(n$13); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 24 -> 20 ;
23 [label="23:  ConditinalStmt Branch \n   n$12=*&__assert_file__:class NSString * [line 19]\n  DECLARE_LOCALS(&SIL_temp_conditional___20); [line 19]\n  *&SIL_temp_conditional___20:class NSString *=n$12 [line 19]\n  REMOVE_TEMPS(n$12); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 23 -> 20 ;
22 [label="22: Prune (false branch) \n   n$11=*&__assert_file__:class NSString * [line 19]\n  PRUNE((n$11 == 0), false); [line 19]\n  REMOVE_TEMPS(n$11); [line 19]\n " shape="invhouse"]
	

	 22 -> 24 ;
21 [label="21: Prune (true branch) \n   n$11=*&__assert_file__:class NSString * [line 19]\n  PRUNE((n$11 != 0), true); [line 19]\n  REMOVE_TEMPS(n$11); [line 19]\n " shape="invhouse"]
	

	 21 -> 23 ;
20 [label="20: + \n  " ]
	

	 20 -> 25 ;
19 [label="19:  Assertion failure \n   _fun___infer_fail(\"ASSERTION_FAILURE\":void ) [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="box"]
	

	 19 -> 2 ;
18 [label="18: Prune (false branch) \n   n$5=*&SIL_temp_conditional___11:int  [line 21]\n  NULLIFY(&SIL_temp_conditional___11,true); [line 21]\n  PRUNE((n$5 == 0), false); [line 21]\n  REMOVE_TEMPS(n$5); [line 21]\n " shape="invhouse"]
	

	 18 -> 10 ;
17 [label="17: Prune (true branch) \n   n$5=*&SIL_temp_conditional___11:int  [line 21]\n  NULLIFY(&SIL_temp_conditional___11,true); [line 21]\n  PRUNE((n$5 != 0), true); [line 21]\n  REMOVE_TEMPS(n$5); [line 21]\n  NULLIFY(&target,false); [line 21]\n " shape="invhouse"]
	

	 17 -> 26 ;
16 [label="16:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___11); [line 21]\n  *&SIL_temp_conditional___11:int =1 [line 21]\n  APPLY_ABSTRACTION; [line 21]\n " shape="box"]
	

	 16 -> 11 ;
15 [label="15:  ConditinalStmt Branch \n   DECLARE_LOCALS(&SIL_temp_conditional___11); [line 21]\n  *&SIL_temp_conditional___11:int =0 [line 21]\n  APPLY_ABSTRACTION; [line 21]\n " shape="box"]
	

	 15 -> 11 ;
14 [label="14: Prune (false branch) \n   PRUNE(((n$4 != (void *)0) == 0), false); [line 19]\n  REMOVE_TEMPS(n$4); [line 19]\n " shape="invhouse"]
	

	 14 -> 16 ;
13 [label="13: Prune (true branch) \n   PRUNE(((n$4 != (void *)0) != 0), true); [line 19]\n  REMOVE_TEMPS(n$4); [line 19]\n " shape="invhouse"]
	

	 13 -> 15 ;
12 [label="12:  BinaryOperatorStmt: NE \n   n$4=*&target:class A * [line 19]\n " shape="box"]
	

	 12 -> 13 ;
	 12 -> 14 ;
11 [label="11: + \n  " ]
	

	 11 -> 17 ;
	 11 -> 18 ;
10 [label="10: + \n  " ]
	

	 10 -> 8 ;
	 10 -> 9 ;
9 [label="9: Prune (false branch) \n   PRUNE((0 == 0), false); [line 19]\n " shape="invhouse"]
	

	 9 -> 6 ;
8 [label="8: Prune (true branch) \n   PRUNE((0 != 0), true); [line 19]\n  APPLY_ABSTRACTION; [line 19]\n " shape="invhouse"]
	

	 8 -> 7 ;
7 [label="7: + \n  " ]
	

	 7 -> 12 ;
6 [label="6:  Return Stmt \n   n$1=*&target:class A * [line 20]\n  n$0=_fun_A_x(n$1:class A *) virtual [line 20]\n  *&return:int =n$0 [line 20]\n  REMOVE_TEMPS(n$0,n$1); [line 20]\n  NULLIFY(&target,false); [line 20]\n  APPLY_ABSTRACTION; [line 20]\n " shape="box"]
	

	 6 -> 2 ;
2 [label="2: Exit A_addTarget: \n  " color=yellow style=filled]
	

1 [label="1: Start A_addTarget:\nFormals:  self:class A * target:class A *\nLocals:  __assert_file__:class NSString * \n   DECLARE_LOCALS(&return,&__assert_file__); [line 18]\n  NULLIFY(&__assert_file__,false); [line 18]\n  NULLIFY(&self,false); [line 18]\n " color=yellow style=filled]
	

	 1 -> 7 ;
}
