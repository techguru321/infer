/* @generated */
digraph iCFG {
"struct_forward_declare::Z_ptr_div04" [label="4:  BinaryOperatorStmt: Assign \n   n$3=*&z:class struct_forward_declare::Z * [line 67]\n  *n$3.f:int =0 [line 67]\n " shape="box"]
	

	 "struct_forward_declare::Z_ptr_div04" -> "struct_forward_declare::Z_ptr_div03" ;
"struct_forward_declare::Z_ptr_div03" [label="3:  Return Stmt \n   n$0=*&z:class struct_forward_declare::Z * [line 68]\n  _=*n$0:class struct_forward_declare::Z  [line 68]\n  n$2=_fun_struct_forward_declare::Z_getF(n$0:class struct_forward_declare::Z *) [line 68]\n  *&return:int =(1 / n$2) [line 68]\n " shape="box"]
	

	 "struct_forward_declare::Z_ptr_div03" -> "struct_forward_declare::Z_ptr_div02" ;
"struct_forward_declare::Z_ptr_div02" [label="2: Exit struct_forward_declare::Z_ptr_div0 \n  " color=yellow style=filled]
	

"struct_forward_declare::Z_ptr_div01" [label="1: Start struct_forward_declare::Z_ptr_div0\nFormals:  z:class struct_forward_declare::Z *\nLocals:  \n   DECLARE_LOCALS(&return); [line 63]\n " color=yellow style=filled]
	

	 "struct_forward_declare::Z_ptr_div01" -> "struct_forward_declare::Z_ptr_div04" ;
"struct_forward_declare::X_div05" [label="5:  DeclStmt \n   _fun_struct_forward_declare::X_X(&x:class struct_forward_declare::X *) [line 37]\n " shape="box"]
	

	 "struct_forward_declare::X_div05" -> "struct_forward_declare::X_div04" ;
"struct_forward_declare::X_div04" [label="4:  BinaryOperatorStmt: Assign \n   *&x.f:int =0 [line 38]\n " shape="box"]
	

	 "struct_forward_declare::X_div04" -> "struct_forward_declare::X_div03" ;
"struct_forward_declare::X_div03" [label="3:  Return Stmt \n   _=*&x:class struct_forward_declare::X  [line 39]\n  n$1=_fun_struct_forward_declare::X_getF(&x:class struct_forward_declare::X &) [line 39]\n  *&return:int =(1 / n$1) [line 39]\n " shape="box"]
	

	 "struct_forward_declare::X_div03" -> "struct_forward_declare::X_div02" ;
"struct_forward_declare::X_div02" [label="2: Exit struct_forward_declare::X_div0 \n  " color=yellow style=filled]
	

"struct_forward_declare::X_div01" [label="1: Start struct_forward_declare::X_div0\nFormals: \nLocals:  x:class struct_forward_declare::X  \n   DECLARE_LOCALS(&return,&x); [line 36]\n " color=yellow style=filled]
	

	 "struct_forward_declare::X_div01" -> "struct_forward_declare::X_div05" ;
"struct_forward_declare::Z_Z2" [label="2: Exit struct_forward_declare::Z_Z \n  " color=yellow style=filled]
	

"struct_forward_declare::Z_Z1" [label="1: Start struct_forward_declare::Z_Z\nFormals:  this:class struct_forward_declare::Z *\nLocals:  \n   DECLARE_LOCALS(&return); [line 28]\n " color=yellow style=filled]
	

	 "struct_forward_declare::Z_Z1" -> "struct_forward_declare::Z_Z2" ;
"struct_forward_declare::fun_with_Z3" [label="3:  DeclStmt \n   n$0=*&z1:class struct_forward_declare::Z * [line 26]\n  *&z2:class struct_forward_declare::Z *=n$0 [line 26]\n " shape="box"]
	

	 "struct_forward_declare::fun_with_Z3" -> "struct_forward_declare::fun_with_Z2" ;
"struct_forward_declare::fun_with_Z2" [label="2: Exit struct_forward_declare::fun_with_Z \n  " color=yellow style=filled]
	

"struct_forward_declare::fun_with_Z1" [label="1: Start struct_forward_declare::fun_with_Z\nFormals:  z1:class struct_forward_declare::Z *\nLocals:  z2:class struct_forward_declare::Z * \n   DECLARE_LOCALS(&return,&z2); [line 26]\n " color=yellow style=filled]
	

	 "struct_forward_declare::fun_with_Z1" -> "struct_forward_declare::fun_with_Z3" ;
"struct_forward_declare::X_X2" [label="2: Exit struct_forward_declare::X_X \n  " color=yellow style=filled]
	

"struct_forward_declare::X_X1" [label="1: Start struct_forward_declare::X_X\nFormals:  this:class struct_forward_declare::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 19]\n " color=yellow style=filled]
	

	 "struct_forward_declare::X_X1" -> "struct_forward_declare::X_X2" ;
"struct_forward_declare::Z_getF3" [label="3:  Return Stmt \n   n$0=*&this:class struct_forward_declare::Z * [line 30]\n  n$1=*n$0.f:int  [line 30]\n  *&return:int =n$1 [line 30]\n " shape="box"]
	

	 "struct_forward_declare::Z_getF3" -> "struct_forward_declare::Z_getF2" ;
"struct_forward_declare::Z_getF2" [label="2: Exit struct_forward_declare::Z_getF \n  " color=yellow style=filled]
	

"struct_forward_declare::Z_getF1" [label="1: Start struct_forward_declare::Z_getF\nFormals:  this:class struct_forward_declare::Z *\nLocals:  \n   DECLARE_LOCALS(&return); [line 30]\n " color=yellow style=filled]
	

	 "struct_forward_declare::Z_getF1" -> "struct_forward_declare::Z_getF3" ;
"struct_forward_declare::X_Y_div010" [label="10:  DeclStmt \n   _fun_struct_forward_declare::X_X(&x:class struct_forward_declare::X *) [line 48]\n " shape="box"]
	

	 "struct_forward_declare::X_Y_div010" -> "struct_forward_declare::X_Y_div09" ;
"struct_forward_declare::X_Y_div09" [label="9:  BinaryOperatorStmt: Assign \n   *&x.y:class struct_forward_declare::Y *=null [line 49]\n " shape="box"]
	

	 "struct_forward_declare::X_Y_div09" -> "struct_forward_declare::X_Y_div08" ;
"struct_forward_declare::X_Y_div08" [label="8:  BinaryOperatorStmt: Assign \n   *&x.f:int =0 [line 50]\n " shape="box"]
	

	 "struct_forward_declare::X_Y_div08" -> "struct_forward_declare::X_Y_div05" ;
	 "struct_forward_declare::X_Y_div08" -> "struct_forward_declare::X_Y_div06" ;
"struct_forward_declare::X_Y_div07" [label="7:  Return Stmt \n   *&return:int =1 [line 52]\n " shape="box"]
	

	 "struct_forward_declare::X_Y_div07" -> "struct_forward_declare::X_Y_div02" ;
"struct_forward_declare::X_Y_div06" [label="6: Prune (false branch) \n   n$2=*&x.y:class struct_forward_declare::Y * [line 51]\n  PRUNE((n$2 == 0), false); [line 51]\n " shape="invhouse"]
	

	 "struct_forward_declare::X_Y_div06" -> "struct_forward_declare::X_Y_div04" ;
"struct_forward_declare::X_Y_div05" [label="5: Prune (true branch) \n   n$2=*&x.y:class struct_forward_declare::Y * [line 51]\n  PRUNE((n$2 != 0), true); [line 51]\n " shape="invhouse"]
	

	 "struct_forward_declare::X_Y_div05" -> "struct_forward_declare::X_Y_div07" ;
"struct_forward_declare::X_Y_div04" [label="4: + \n  " ]
	

	 "struct_forward_declare::X_Y_div04" -> "struct_forward_declare::X_Y_div03" ;
"struct_forward_declare::X_Y_div03" [label="3:  Return Stmt \n   _=*&x:class struct_forward_declare::X  [line 54]\n  n$1=_fun_struct_forward_declare::X_getF(&x:class struct_forward_declare::X &) [line 54]\n  *&return:int =(1 / n$1) [line 54]\n " shape="box"]
	

	 "struct_forward_declare::X_Y_div03" -> "struct_forward_declare::X_Y_div02" ;
"struct_forward_declare::X_Y_div02" [label="2: Exit struct_forward_declare::X_Y_div0 \n  " color=yellow style=filled]
	

"struct_forward_declare::X_Y_div01" [label="1: Start struct_forward_declare::X_Y_div0\nFormals: \nLocals:  x:class struct_forward_declare::X  \n   DECLARE_LOCALS(&return,&x); [line 47]\n " color=yellow style=filled]
	

	 "struct_forward_declare::X_Y_div01" -> "struct_forward_declare::X_Y_div010" ;
"struct_forward_declare::X_ptr_div04" [label="4:  BinaryOperatorStmt: Assign \n   n$3=*&x:class struct_forward_declare::X * [line 43]\n  *n$3.f:int =0 [line 43]\n " shape="box"]
	

	 "struct_forward_declare::X_ptr_div04" -> "struct_forward_declare::X_ptr_div03" ;
"struct_forward_declare::X_ptr_div03" [label="3:  Return Stmt \n   n$0=*&x:class struct_forward_declare::X * [line 44]\n  _=*n$0:class struct_forward_declare::X  [line 44]\n  n$2=_fun_struct_forward_declare::X_getF(n$0:class struct_forward_declare::X *) [line 44]\n  *&return:int =(1 / n$2) [line 44]\n " shape="box"]
	

	 "struct_forward_declare::X_ptr_div03" -> "struct_forward_declare::X_ptr_div02" ;
"struct_forward_declare::X_ptr_div02" [label="2: Exit struct_forward_declare::X_ptr_div0 \n  " color=yellow style=filled]
	

"struct_forward_declare::X_ptr_div01" [label="1: Start struct_forward_declare::X_ptr_div0\nFormals:  x:class struct_forward_declare::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 42]\n " color=yellow style=filled]
	

	 "struct_forward_declare::X_ptr_div01" -> "struct_forward_declare::X_ptr_div04" ;
"struct_forward_declare::X_getF3" [label="3:  Return Stmt \n   n$0=*&this:class struct_forward_declare::X * [line 21]\n  n$1=*n$0.f:int  [line 21]\n  *&return:int =n$1 [line 21]\n " shape="box"]
	

	 "struct_forward_declare::X_getF3" -> "struct_forward_declare::X_getF2" ;
"struct_forward_declare::X_getF2" [label="2: Exit struct_forward_declare::X_getF \n  " color=yellow style=filled]
	

"struct_forward_declare::X_getF1" [label="1: Start struct_forward_declare::X_getF\nFormals:  this:class struct_forward_declare::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 21]\n " color=yellow style=filled]
	

	 "struct_forward_declare::X_getF1" -> "struct_forward_declare::X_getF3" ;
"struct_forward_declare::Z_div05" [label="5:  DeclStmt \n   _fun_struct_forward_declare::Z_Z(&z:class struct_forward_declare::Z *) [line 58]\n " shape="box"]
	

	 "struct_forward_declare::Z_div05" -> "struct_forward_declare::Z_div04" ;
"struct_forward_declare::Z_div04" [label="4:  BinaryOperatorStmt: Assign \n   *&z.f:int =0 [line 59]\n " shape="box"]
	

	 "struct_forward_declare::Z_div04" -> "struct_forward_declare::Z_div03" ;
"struct_forward_declare::Z_div03" [label="3:  Return Stmt \n   _=*&z:class struct_forward_declare::Z  [line 60]\n  n$1=_fun_struct_forward_declare::Z_getF(&z:class struct_forward_declare::Z &) [line 60]\n  *&return:int =(1 / n$1) [line 60]\n " shape="box"]
	

	 "struct_forward_declare::Z_div03" -> "struct_forward_declare::Z_div02" ;
"struct_forward_declare::Z_div02" [label="2: Exit struct_forward_declare::Z_div0 \n  " color=yellow style=filled]
	

"struct_forward_declare::Z_div01" [label="1: Start struct_forward_declare::Z_div0\nFormals: \nLocals:  z:class struct_forward_declare::Z  \n   DECLARE_LOCALS(&return,&z); [line 57]\n " color=yellow style=filled]
	

	 "struct_forward_declare::Z_div01" -> "struct_forward_declare::Z_div05" ;
}
