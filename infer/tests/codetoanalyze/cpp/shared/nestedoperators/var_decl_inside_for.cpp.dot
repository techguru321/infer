/* @generated */
digraph iCFG {
"init_with_scoped_var10" [label="10:  DeclStmt \n   *&result:int =0 [line 18]\n " shape="box"]
	

	 "init_with_scoped_var10" -> "init_with_scoped_var4" ;
"init_with_scoped_var9" [label="9:  BinaryOperatorStmt: AddAssign \n   n$3=*&x:int  [line 20]\n  n$4=*&result:int  [line 20]\n  *&result:int =(n$4 + n$3) [line 20]\n " shape="box"]
	

	 "init_with_scoped_var9" -> "init_with_scoped_var5" ;
"init_with_scoped_var8" [label="8:  DeclStmt \n   n$2=*&i:int  [line 19]\n  *&x:int =n$2 [line 19]\n " shape="box"]
	

	 "init_with_scoped_var8" -> "init_with_scoped_var6" ;
	 "init_with_scoped_var8" -> "init_with_scoped_var7" ;
"init_with_scoped_var7" [label="7: Prune (false branch) \n   n$1=*&x:int  [line 19]\n  PRUNE((n$1 == 0), false); [line 19]\n " shape="invhouse"]
	

	 "init_with_scoped_var7" -> "init_with_scoped_var2" ;
"init_with_scoped_var6" [label="6: Prune (true branch) \n   n$1=*&x:int  [line 19]\n  PRUNE((n$1 != 0), true); [line 19]\n " shape="invhouse"]
	

	 "init_with_scoped_var6" -> "init_with_scoped_var9" ;
"init_with_scoped_var5" [label="5:  UnaryOperator \n   n$0=*&i:int  [line 19]\n  *&i:int =(n$0 - 1) [line 19]\n " shape="box"]
	

	 "init_with_scoped_var5" -> "init_with_scoped_var3" ;
"init_with_scoped_var4" [label="4:  DeclStmt \n   *&i:int =10 [line 19]\n " shape="box"]
	

	 "init_with_scoped_var4" -> "init_with_scoped_var3" ;
"init_with_scoped_var3" [label="3: + \n  " ]
	

	 "init_with_scoped_var3" -> "init_with_scoped_var8" ;
"init_with_scoped_var2" [label="2: Exit init_with_scoped_var \n  " color=yellow style=filled]
	

"init_with_scoped_var1" [label="1: Start init_with_scoped_var\nFormals: \nLocals:  i:int  x:int  result:int  \n   DECLARE_LOCALS(&return,&i,&x,&result); [line 17]\n " color=yellow style=filled]
	

	 "init_with_scoped_var1" -> "init_with_scoped_var10" ;
"simple_init10" [label="10:  DeclStmt \n   *&result:int =0 [line 11]\n " shape="box"]
	

	 "simple_init10" -> "simple_init4" ;
"simple_init9" [label="9:  BinaryOperatorStmt: AddAssign \n   n$2=*&x:int  [line 13]\n  n$3=*&result:int  [line 13]\n  *&result:int =(n$3 + n$2) [line 13]\n " shape="box"]
	

	 "simple_init9" -> "simple_init5" ;
"simple_init8" [label="8:  DeclStmt \n   *&x:int =2 [line 12]\n " shape="box"]
	

	 "simple_init8" -> "simple_init6" ;
	 "simple_init8" -> "simple_init7" ;
"simple_init7" [label="7: Prune (false branch) \n   n$1=*&x:int  [line 12]\n  PRUNE((n$1 == 0), false); [line 12]\n " shape="invhouse"]
	

	 "simple_init7" -> "simple_init2" ;
"simple_init6" [label="6: Prune (true branch) \n   n$1=*&x:int  [line 12]\n  PRUNE((n$1 != 0), true); [line 12]\n " shape="invhouse"]
	

	 "simple_init6" -> "simple_init9" ;
"simple_init5" [label="5:  UnaryOperator \n   n$0=*&i:int  [line 12]\n  *&i:int =(n$0 + 1) [line 12]\n " shape="box"]
	

	 "simple_init5" -> "simple_init3" ;
"simple_init4" [label="4:  DeclStmt \n   *&i:int =0 [line 12]\n " shape="box"]
	

	 "simple_init4" -> "simple_init3" ;
"simple_init3" [label="3: + \n  " ]
	

	 "simple_init3" -> "simple_init8" ;
"simple_init2" [label="2: Exit simple_init \n  " color=yellow style=filled]
	

"simple_init1" [label="1: Start simple_init\nFormals: \nLocals:  i:int  x:int  result:int  \n   DECLARE_LOCALS(&return,&i,&x,&result); [line 10]\n " color=yellow style=filled]
	

	 "simple_init1" -> "simple_init10" ;
}
