arg_index_matcher.hack, Main.staticSink, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ArgIndexMatcher$static.source`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ArgIndexMatcher$static.source`,value passed as argument `#1` to `ArgIndexMatcher$static.sink1` with kind `Simple`], source: $root.Level1::taintSource, sink: ArgIndexMatcher$static.sink1, tainted expression: $tainted
arg_index_matcher.hack, Main.instanceSink, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `ArgIndexMatcher$static.source`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ArgIndexMatcher$static.source`,value passed as argument `#1` to `ArgIndexMatcher.sink2` with kind `Simple`], source: $root.Level1::taintSource, sink: ArgIndexMatcher.sink2, tainted expression: $tainted
async.hack, $root.testnamingBad, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
async.hack, $root.testnamingBad2, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
async.hack, $root.testnamingBad3, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
async.hack, $root.testnamingBad4, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
async.hack, $root.genBad, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
async.hack, $root.genBad2, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
async.hack, $root.genBadIndirect, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,when calling `$root.produce_awaitable_int` here,allocated here,awaitable becomes unreachable here]
async.hack, $root.genAndAwaitBad, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
asyncinterface.hack, $root.AsyncInterface::callinterfaceBad, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
asyncvec.hack, $root.vecAppendBad, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
asyncvec.hack, $root.vecupdateBad, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
asyncvec.hack, $root.vecupdateBad, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
asyncvec2.hack, $root.constVecBad, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
asyncvec2.hack, $root.loopyVecBadFN, 7, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
basic_object.hack, BasicObject::Main.set_and_get_A_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_B_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_C_bad, 10, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_Derived_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_Derived_copy_bad, 9, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
booleans.hack, $root.Booleans::testBoolBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.Booleans::testBoolBad` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Booleans::testBoolBad, sink: $root.Level1::taintSink, tainted expression: $sc
booleans.hack, $root.Booleans::testNullBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.Booleans::testNullBad` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Booleans::testNullBad, sink: $root.Level1::taintSink, tainted expression: $sc
booleans.hack, $root.Booleans::testNotNullBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.Booleans::testNotNullBad` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Booleans::testNotNullBad, sink: $root.Level1::taintSink, tainted expression: $sc
call_variadic.hack, CallVariadic::CallVariadic$static.callVariadicWith2ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.callVariadicWith3ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.callVariadicWith3ArgsBisBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.transitiveCallVariadicWith2ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.callVariadic` here,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.transitiveCallVariadicWith3ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.callVariadic` here,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.transitiveCallVariadicWith3ArgsBisBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.callVariadic` here,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.callVariadicArg0InSinkBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArg0InSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
call_variadic.hack, CallVariadic::CallVariadic$static.FP_callVariadicArg0InSinkOk, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArg0InSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
closures.hack, Closures::C1.f1Bad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Closures::C1.f1Bad` with kind `Simple`,when calling `Closures::Utils.logDelayed` here,when calling `Closures::Delayed.startAndWait` here,when calling `Closure$Closures::Utils::logDelayed.__invoke` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: Closures::C1.f1Bad, sink: $root.Level1::taintSink, tainted expression: $sc
closures.hack, Closures::Main.id_fst_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
closures.hack, Closures::ClosuresAndDict$static.main_bad, 8, TAINT_ERROR, no_bucket, ERROR, [in call to `Closures::ClosuresAndDict$static.run`,in call to `Closure$Closures::ClosuresAndDict::main_bad.__invoke`,in call to `Closures::Unsafe.getSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Closures::Unsafe.getSource`,return from call to `Closure$Closures::ClosuresAndDict::main_bad.__invoke`,return from call to `Closures::ClosuresAndDict$static.run`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $value
control_flow.hack, $root.ControlFlow::typeCheckDoesntConfuseTheAnalysis_maintainsTaint_Bad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `$root.ControlFlow::typeCheckDoesntConfuseTheAnalysis_maintainsTaint_Bad` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::typeCheckDoesntConfuseTheAnalysis_maintainsTaint_Bad, sink: $root.Level1::taintSink, tainted expression: $sc
control_flow.hack, $root.ControlFlow::nullsafeAccessTaintedBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.ControlFlow::nullsafeAccessTaintedBad` with kind `Simple`,when calling `$root.ControlFlow::nullsafeLog` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::nullsafeAccessTaintedBad, sink: $root.Level1::taintSink, tainted expression: $c
control_flow.hack, $root.ControlFlow::loggingSensitiveNonnullBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.ControlFlow::loggingSensitiveNonnullBad` with kind `Simple`,when calling `$root.ControlFlow::logWhenNonnull` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::loggingSensitiveNonnullBad, sink: $root.Level1::taintSink, tainted expression: $sc->data
control_flow.hack, $root.ControlFlow::loggingSensitiveNonnullCheckedBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.ControlFlow::loggingSensitiveNonnullCheckedBad` with kind `Simple`,when calling `$root.ControlFlow::logWhenNonnull` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::loggingSensitiveNonnullCheckedBad, sink: $root.Level1::taintSink, tainted expression: $sc->data
control_flow.hack, $root.ControlFlow::loggingSensitiveBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.ControlFlow::loggingSensitiveBad` with kind `Simple`,when calling `$root.ControlFlow::logWhenSensitive` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::loggingSensitiveBad, sink: $root.Level1::taintSink, tainted expression: $sc
control_flow.hack, $root.ControlFlow::loggingSensitiveViaCBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.ControlFlow::loggingSensitiveViaCBad` with kind `Simple`,when calling `$root.ControlFlow::logWhenC` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::loggingSensitiveViaCBad, sink: $root.Level1::taintSink, tainted expression: $carrier->data
control_flow.hack, $root.ControlFlow::FP_notLoggingSensitiveViaDOk, 6, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.ControlFlow::FP_notLoggingSensitiveViaDOk` with kind `Simple`,when calling `$root.ControlFlow::logWhenC` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::FP_notLoggingSensitiveViaDOk, sink: $root.Level1::taintSink, tainted expression: $carrier->data
cross_file_taint_flow.hack, $root.directCrossFileFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `OuterFile$static.taintSource` with kind `Simple`,value passed as argument `#0` to `OuterFile$static.taintSink` with kind `Simple`], source: OuterFile$static.taintSource, sink: OuterFile$static.taintSink, tainted expression: $tainted
cross_file_taint_flow.hack, $root.indirectCrossFileFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `OuterFile$static.tainted`,source of the taint here: value returned from `OuterFile$static.taintSource` with kind `Simple`,return from call to `OuterFile$static.tainted`,value passed as argument `#0` to `OuterFile$static.taintSink` with kind `Simple`], source: OuterFile$static.taintSource, sink: OuterFile$static.taintSink, tainted expression: $tainted
cross_file_taint_flow.hack, $root.inheritanceCrossFileFlowBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `OuterFileSuper$static.superTaintSource` with kind `Simple`,value passed as argument `#0` to `OuterFile$static.taintSink` with kind `Simple`], source: OuterFileSuper$static.superTaintSource, sink: OuterFile$static.taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.init_and_load_bad, 6, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.copy_on_write_bad, 10, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.multidim_copy_on_write_bad, 26, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.copy_on_write_no_dynamic_type_bad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
dictforeach.hack, $root.dictForeachBad, 7, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
dictforeach.hack, $root.dictforeachBad2, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
equality.hack, Equality::CmpSame.cmpSameNullSimpleBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.doubleCmpSameNullBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.cmpSameIntSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.cmpSameBoolSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.cmpSameObjectSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.FP_cmpSameObjectSimpleGood, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.neObjectSimpleBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.cmpSameDictSimpleBad, 8, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.FP_cmpSameDictSimpleGood, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.cmpSameDictNestedBad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpSame.FP_cmpSameDictNestedGood, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpNsame.nsameNullSimpleBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpNsame.nsameIntSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpNsame.neBoolSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.cmpEqNullSimpleBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.neNullSimpleBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.doubleCmpSameNullBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.cmpEqIntSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.neIntSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.cmpEqBoolSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.FP_cmpEqBoolSimpleGood, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.neBoolSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.FP_neBoolSimpleGood, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.cmpEqObjectSimpleBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.FP_cmpEqObjectSimpleGood, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.neObjectSimpleBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.cmpEqDictSimpleBad, 8, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.FP_cmpEqDictSimpleGood, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.cmpEqDictNestedBad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
equality.hack, Equality::CmpEq.FP_cmpEqDictNestedGood, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
extra_models.hack, $root.ExtraModels::derefNullFromHackModelBad, 1, NULLPTR_DEREFERENCE, no_bucket, ERROR, [in call to `$root.TestModels::returnNullC`,is assigned to the null pointer,returned,return from call to `$root.TestModels::returnNullC`,invalid access occurs here]
extra_models.hack, $root.ExtraModels::derefNullFromSilModelBad, 1, NULLPTR_DEREFERENCE, no_bucket, ERROR, [in call to `$root.TestModels::getNullCFromSil`,is assigned to the null pointer,returned,return from call to `$root.TestModels::getNullCFromSil`,invalid access occurs here]
function_reference.hack, FunctionReference::Test1$static.runFooBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `FunctionReference::Main$static.foo`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `FunctionReference::Main$static.foo`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: FunctionReference::Main$static.foo()
function_reference.hack, FunctionReference::Test2$static.runFooUsingApplyBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `FunctionReference::Test2$static.apply`,in call to `FunctionReference::Main$static.foo`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `FunctionReference::Main$static.foo`,return from call to `FunctionReference::Test2$static.apply`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: FunctionReference::Test2$static.apply()
function_reference.hack, FunctionReference::Test3$static.runFooWithBundleBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `FunctionReference::Bundle.run`,in call to `FunctionReference::Main$static.foo`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `FunctionReference::Main$static.foo`,return from call to `FunctionReference::Bundle.run`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: FunctionReference::Bundle.run()
function_reference.hack, FunctionReference::Test4$static.runFooWithLateBindingBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `FunctionReference::A$static.lateBinding`,in call to `FunctionReference::B$static.foo`,in call to `FunctionReference::Main$static.foo`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `FunctionReference::Main$static.foo`,return from call to `FunctionReference::B$static.foo`,return from call to `FunctionReference::A$static.lateBinding`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: FunctionReference::A$static.lateBinding()
global_access.hack, GlobalAccess::GlobalAccess.basic_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [access occurs here]
global_access.hack, GlobalAccess::GlobalAccess.indirect_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [when calling `GlobalAccess::A.get` here,access occurs here]
global_access.hack, GlobalAccess::GlobalAccess.indirect_other_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [when calling `GlobalAccess::A.get` here,access occurs here]
global_access.hack, GlobalAccess::GlobalAccess.call1_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [access occurs here]
global_access.hack, GlobalAccess::GlobalAccess.call2_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [access occurs here]
global_access.hack, GlobalAccess::GlobalAccess.call3_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [access occurs here]
global_access.hack, GlobalAccess::GlobalAccess.call6_is_entry_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [access occurs here]
global_access.hack, GlobalAccess::EventHandler2.indirect_empty_does_not_extend_bad, 1, PULSE_TRANSITIVE_ACCESS, no_bucket, ERROR, [when calling `GlobalAccess::A.get` here,access occurs here]
intra_file_flow.hack, IntraFile::IntraFileFlow.explicitSinkMethodDirectOnHackMixedSinkBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow.explicitSinkMethodDirectOnHackMixedSinkBad` with kind `Simple`,when calling `IntraFile::IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad` here,value passed as argument `#0` to `IntraFile::HackMixed$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow.explicitSinkMethodDirectOnHackMixedSinkBad, sink: IntraFile::HackMixed$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFile::IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad` with kind `Simple`,value passed as argument `#0` to `IntraFile::HackMixed$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad, sink: IntraFile::HackMixed$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFile::IntraFileFlow.explicitSinkMethodDirectBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow.explicitSinkMethodDirectBad` with kind `Simple`,when calling `IntraFile::IntraFileFlow$static.explicitSinkMethodDirectBad` here,value passed as argument `#0` to `IntraFile::KnownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow.explicitSinkMethodDirectBad, sink: IntraFile::KnownClass$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFile::IntraFileFlow$static.explicitSinkMethodDirectBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow$static.explicitSinkMethodDirectBad` with kind `Simple`,value passed as argument `#0` to `IntraFile::KnownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow$static.explicitSinkMethodDirectBad, sink: IntraFile::KnownClass$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFile::IntraFileFlow.explicitSinkMethodDerivedBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow.explicitSinkMethodDerivedBad` with kind `Simple`,when calling `IntraFile::IntraFileFlow$static.explicitSinkMethodDerivedBad` here,value passed as argument `#0` to `IntraFile::KnownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow.explicitSinkMethodDerivedBad, sink: IntraFile::KnownClass$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFile::IntraFileFlow$static.explicitSinkMethodDerivedBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow$static.explicitSinkMethodDerivedBad` with kind `Simple`,in call to function `IntraFile::SensitiveClass.getDerived` with no summary,value passed as argument `#0` to `IntraFile::KnownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow$static.explicitSinkMethodDerivedBad, sink: IntraFile::KnownClass$static.explicitSinkAllArgs, tainted expression: $derived
intra_file_flow.hack, IntraFile::IntraFileFlow.explicitSinkMethodDerivedDynamicBad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow.explicitSinkMethodDerivedDynamicBad` with kind `Simple`,in call to function `IntraFile::SensitiveClass.getDerived` with no summary,when calling `IntraFile::IntraFileFlow.callExplicitSinkAllArgs` here,value passed as argument `#0` to `IntraFile::KnownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFile::IntraFileFlow.explicitSinkMethodDerivedDynamicBad, sink: IntraFile::KnownClass$static.explicitSinkAllArgs, tainted expression: $derived
intra_file_flow.hack, IntraFile::IntraFileFlow.explicitSinkClassDirectBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow.explicitSinkClassDirectBad` with kind `Simple`,when calling `IntraFile::IntraFileFlow$static.explicitSinkClassDirectBad` here,value passed as argument `#0` to `IntraFile::Logger$static.someLogMethod` with kind `Simple`], source: IntraFile::IntraFileFlow.explicitSinkClassDirectBad, sink: IntraFile::Logger$static.someLogMethod, tainted expression: $sc
intra_file_flow.hack, IntraFile::IntraFileFlow$static.explicitSinkClassDirectBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `IntraFile::IntraFileFlow$static.explicitSinkClassDirectBad` with kind `Simple`,value passed as argument `#0` to `IntraFile::Logger$static.someLogMethod` with kind `Simple`], source: IntraFile::IntraFileFlow$static.explicitSinkClassDirectBad, sink: IntraFile::Logger$static.someLogMethod, tainted expression: $sc
late_binding.hack, LateBinding::Main.call_caller_bad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
late_binding.hack, LateBinding::Main.call_parent_caller_bad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
late_binding.hack, LateBinding::Main.call_C_with_classname_bad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
late_binding.hack, LateBinding::Main.call_A_with_classname_bad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
late_binding_and_trait.hack, LateBindingAndTrait::Main.bad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `LateBindingAndTrait::T$static.run` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
level1.hack, $root.Level1::basicFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::Main.fromABad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::Main.fromBBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::Main.fromCBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::C.sourceIfC`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::C.sourceIfC`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::NeedSpecialization$static.fromABad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,return from call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: ExtendsTests::NeedSpecialization$static.getSourceIfA()
level1_with_extends.hack, ExtendsTests::NeedSpecialization$static.fromBBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,return from call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: ExtendsTests::NeedSpecialization$static.getSourceIfA()
level1_with_extends.hack, ExtendsTests::NeedSpecialization$static.fromCBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::NeedSpecialization$static.getSourceIfC`,in call to `ExtendsTests::C.sourceIfC`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::C.sourceIfC`,return from call to `ExtendsTests::NeedSpecialization$static.getSourceIfC`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: ExtendsTests::NeedSpecialization$static.getSourceIfC()
level1_with_static.hack, StaticTests::Main.fromABad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `StaticTests::A$static.source`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `StaticTests::A$static.source`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_static.hack, StaticTests::Main.fromBBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `StaticTests::A$static.source`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `StaticTests::A$static.source`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level5.hack, Level5.runBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Level5.loadUsingSuperContext`,in call to `Level5$static.loadUsingSuperContext`,source of the taint here: value returned from `Level5Base$static.getSuperContext` with kind `Simple`,return from call to `Level5$static.loadUsingSuperContext`,return from call to `Level5.loadUsingSuperContext`,when calling `Level5.useDaoContext` here,when calling `Level5$static.useDaoContext` here,when calling `Dao.useContext` here,when calling `DaoQueries$static.queryA` here,value passed as argument `#0` to `Level5DaoQueries$static.query` with kind `Simple`], source: Level5Base$static.getSuperContext, sink: Level5DaoQueries$static.query, tainted expression: $tainted_dao->context
loop.hack, $root.simpleloopBad, 6, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
method_resolution_trait1.hack, $root.basicFlowBad10, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad10.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad10.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait1.hack, $root.basicFlowBad11, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad11.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad11.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait1.hack, $root.basicFlowBad12, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad12.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad12.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait1.hack, $root.basicFlowBad13, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad13.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad13.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait2.hack, $root.basicFlowBad20, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadT.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadT.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait2.hack, $root.basicFlowBad21, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadP.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadP.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait2.hack, $root.basicFlowBad22, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadT.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadT.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait3.hack, $root.basicFlowBad30, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadP.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadP.runSource`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
mistral.hack, $root.Mistral::oops, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
mistral.hack, $root.Mistral::notoops, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
mistral.hack, $root.Mistral::oops_vec, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
mistral.hack, $root.Mistral::oops1, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
mistral.hack, $root.Mistral::oops2, 2, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
mistral.hack, $root.Mistral::oops2, 4, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
primitives.hack, $root.Primitives::logEnabledExplicitBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.Primitives::logEnabledExplicitBad` with kind `Simple`,when calling `$root.Primitives::condLog` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Primitives::logEnabledExplicitBad, sink: $root.Level1::taintSink, tainted expression: $sc
propagators.hack, Propagators::Flows$static.simpleTaintFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Propagators::Source$static.getTainted` with kind `Propagators`,value passed as argument `#0` to `Propagators::Sink$static.process` with kind `BuiltinCatchAll`], source: Propagators::Source$static.getTainted, sink: Propagators::Sink$static.process, tainted expression: $t
propagators.hack, Propagators::Flows$static.propToSinkBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Propagators::Source$static.getTainted` with kind `Propagators`,in call to `Propagators::Prop$static.prop`,value passed as argument `#0` to `Propagators::Sink$static.process` with kind `BuiltinCatchAll`], source: Propagators::Source$static.getTainted, sink: Propagators::Sink$static.process, tainted expression: $t1
propagators.hack, Propagators::Flows$static.propWithSinkToSinkBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Propagators::Source$static.getTainted` with kind `Propagators`,value passed as argument `#0` to `Propagators::Sink$static.process` with kind `BuiltinCatchAll`], source: Propagators::Source$static.getTainted, sink: Propagators::Sink$static.process, tainted expression: $t1
sanitizers.hack, Sanitizers::Flows$static.taintedNotSanitizedBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Sanitizers::Source.getTainted` with kind `Sanitizers`,value passed as argument `#0` to `Sanitizers::Sink$static.process` with kind `Sanitizers`], source: Sanitizers::Source.getTainted, sink: Sanitizers::Sink$static.process, tainted expression: $t
selftest.hack, SelfTest::Baz.fooBad, 4, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
shapes.hack, Shapes::C1.passViaShapeBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1.passViaShapeBad` with kind `Simple`,when calling `Shapes::ShapeLogger$static.logData` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: Shapes::C1.passViaShapeBad, sink: $root.Level1::taintSink, tainted expression: UNKNOWN
shapes.hack, Shapes::C1.passViaShapeGetBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1.passViaShapeGetBad` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: Shapes::C1.passViaShapeGetBad, sink: $root.Level1::taintSink, tainted expression: $s->debug_data
shapes.hack, Shapes::C1.passViaUnknownBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1.passViaUnknownBad` with kind `Simple`,in call to function `$root.Shapes::unknown` with no summary,when calling `Shapes::ShapeLogger$static.logData` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: Shapes::C1.passViaUnknownBad, sink: $root.Level1::taintSink, tainted expression: UNKNOWN
shapes.hack, Shapes::C1.passViaShapeAndUnknownBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1.passViaShapeAndUnknownBad` with kind `Simple`,when calling `Shapes::ShapeLogger$static.logData` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: Shapes::C1.passViaShapeAndUnknownBad, sink: $root.Level1::taintSink, tainted expression: UNKNOWN
shapes.hack, Shapes::C1.shapeLookupBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1.shapeLookupBad` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: Shapes::C1.shapeLookupBad, sink: $root.Level1::taintSink, tainted expression: $sc
shapes.hack, Shapes::C1.FP_propagatedTaintUnrelated, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1.FP_propagatedTaintUnrelated` with kind `Simple`,when calling `Shapes::C1$static.FP_propagatedTaintUnrelated` here,value passed as argument `#0` to `Shapes::ShapeLogger$static.logMixed` with kind `Simple`], source: Shapes::C1.FP_propagatedTaintUnrelated, sink: Shapes::ShapeLogger$static.logMixed, tainted expression: $sc
shapes.hack, Shapes::C1$static.FP_propagatedTaintUnrelated, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1$static.FP_propagatedTaintUnrelated` with kind `Simple`,in call to function `Shapes::SensitiveClass.getId` with no summary,value passed as argument `#0` to `Shapes::ShapeLogger$static.logMixed` with kind `Simple`], source: Shapes::C1$static.FP_propagatedTaintUnrelated, sink: Shapes::ShapeLogger$static.logMixed, tainted expression: $builtins.hack_bool()
shapes.hack, Shapes::C1$static.FP_propagatedTaintUnrelated, 8, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `Shapes::C1$static.FP_propagatedTaintUnrelated` with kind `Simple`,in call to function `Shapes::SensitiveClass.getId` with no summary,in call to function `Shapes::Unknown$static.unknown` with no summary,value passed as argument `#0` to `Shapes::ShapeLogger$static.logMixed` with kind `Simple`], source: Shapes::C1$static.FP_propagatedTaintUnrelated, sink: Shapes::ShapeLogger$static.logMixed, tainted expression: $builtins.hack_bool()
singleton_pattern.hack, SingletonPattern::Main$static.getBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `SingletonPattern::C.getTainted`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SingletonPattern::C.getTainted`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: SingletonPattern::C.getTainted()
static_method_resolution_trait1.hack, $root.SMRT1::Bad0, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `SMRT1::T$static.f_self`,in call to `SMRT1::T$static.f`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SMRT1::T$static.f`,return from call to `SMRT1::T$static.f_self`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
static_method_resolution_trait2.hack, $root.SMRT2::Bad0, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `SMRT2::T$static.f_self`,in call to `SMRT2::C0$static.f`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SMRT2::C0$static.f`,return from call to `SMRT2::T$static.f_self`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
static_method_resolution_trait3.hack, $root.SMRT3::Bad0, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `SMRT3::T$static.f_self`,in call to `SMRT3::T0$static.f`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SMRT3::T0$static.f`,return from call to `SMRT3::T$static.f_self`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
static_method_resolution_trait4.hack, $root.SMRT4::Bad0, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `SMRT4::T$static.f_self`,in call to `SMRT4::P0$static.f`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SMRT4::P0$static.f`,return from call to `SMRT4::T$static.f_self`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
static_method_resolution_trait5.hack, $root.SMRT5::Bad0, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `SMRT5::T$static.f_self`,in call to `SMRT5::P0$static.f`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SMRT5::P0$static.f`,return from call to `SMRT5::T$static.f_self`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
static_method_resolution_trait6.hack, $root.SMRT6::Bad0, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `SMRT6::T$static.f_self`,in call to `SMRT6::T0$static.f`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `SMRT6::T0$static.f`,return from call to `SMRT6::T$static.f_self`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
traces.hack, Traces::Flows.flowBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Traces::Source$static.get` with kind `Traces`,value passed as argument `#0` to `Traces::Helper$static.f1` with kind `BuiltinCatchAll`], source: Traces::Source$static.get, sink: Traces::Helper$static.f1, tainted expression: Traces::Source$static.get()
type_propagation.hack, TypePropagation::Main$static.fromParamsBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `TypePropagation::A.getTainted`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `TypePropagation::A.getTainted`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: TypePropagation::A.getTainted()
type_propagation.hack, TypePropagation::Main$static.fromPropertyThroughParamBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `TypePropagation::A.getTainted`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `TypePropagation::A.getTainted`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: TypePropagation::A.getTainted()
type_propagation.hack, TypePropagation::Main$static.fromPropertyThroughNewBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `TypePropagation::A.getTainted`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `TypePropagation::A.getTainted`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: TypePropagation::A.getTainted()
type_propagation.hack, TypePropagation::Main$static.fromGlobalBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `TypePropagation::A.getTainted`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `TypePropagation::A.getTainted`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: TypePropagation::A.getTainted()
uninit.hack, Uninit::A$static.call_new_self_bad, 2, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::A$static` accessed here,when calling `Uninit::A.__construct` here,global variable `Uninit::A$static` accessed here,when calling `Uninit::A.get_field` here,global variable `Uninit::A$static` accessed here,when calling `Uninit::A$static.get_field` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
uninit.hack, $root.Uninit::call_get_field_bad, 1, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::A$static` accessed here,when calling `Uninit::A$static.get_field` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
uninit.hack, $root.Uninit::call_get_field_after_cond_bad, 4, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::A$static` accessed here,when calling `Uninit::A$static.get_field` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
uninit.hack, Uninit::AbstractUseTrait$static.call_my_trait_get_field_Bad, 1, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::MyTrait$static` accessed here,when calling `Uninit::MyTrait$static.get_field_from_trait` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
uninit.hack, $root.Uninit::call_self_get_field_Bad, 1, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::A$static` accessed here,when calling `Uninit::AbstractUseTrait$static.self_get_field` here,global variable `Uninit::A$static` accessed here,when calling `Uninit::MyTrait$static.get_field_from_trait` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
uninit.hack, $root.Uninit::call_self_get_field2_Bad, 1, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::A$static` accessed here,when calling `Uninit::AbstractUseTrait$static.self_get_field2` here,global variable `Uninit::A$static` accessed here,when calling `Uninit::MyTrait$static.get_field_from_trait2` here,global variable `Uninit::A$static` accessed here,when calling `Uninit::MyTrait$static.get_field_from_trait` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
uninit.hack, $root.Uninit::call_my_trait_get_field_Bad, 1, PULSE_UNINITIALIZED_CONST, no_bucket, ERROR, [global variable `Uninit::MyTrait$static` accessed here,when calling `Uninit::MyTrait$static.get_field_from_trait` here,in call to `hhbc_cls_cns` (modelled),read to uninitialized value occurs here]
unknown.hack, $root.Unknown::basicFlowBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `$root.Unknown::basicFlowBad` with kind `Simple`,value passed as argument `#0` to `Unknown::UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: $root.Unknown::basicFlowBad, sink: Unknown::UnknownClass$static.explicitSinkAllArgs, tainted expression: $sc
unknown.hack, $root.Unknown::basicFlowReturnBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,in call to function `?.myUnknownFun` with no summary,value passed as argument `#0` to `Unknown::UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: $root.Level1::taintSource, sink: Unknown::UnknownClass$static.explicitSinkAllArgs, tainted expression: $res
variadic.hack, Variadic::Variadic$static.callVariadicWith2ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.callVariadicWith3ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.callVariadicWith3ArgsBisBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.transitiveCallVariadicWith2ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.callVariadic` here,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.transitiveCallVariadicWith3ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.callVariadic` here,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.transitiveCallVariadicWith3ArgsBisBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.callVariadic` here,when calling `Variadic::Variadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.callVariadicArg0InSinkBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArg0InSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::Variadic$static.FP_callVariadicArg0InSinkOk, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::Variadic$static.variadicArg0InSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::VariadicUsingSplat$static.callVariadicSinkBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::VariadicUsingSplat$static.variadicSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::VariadicUsingSplat$static.callVariadicWithoutSplatTrueBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::VariadicUsingSplat$static.variadicSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::VariadicUsingSplat$static.expectedBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
variadic.hack, Variadic::VariadicUsingSplat$static.expectedJustNonNullTestBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $taint
variadic.hack, Variadic::WithoutVariadic$static.callVariadicWith2ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.callVariadicWith3ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.callVariadicWith3ArgsBisBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.transitiveCallVariadicWith2ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.callVariadic` here,when calling `Variadic::WithoutVariadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.transitiveCallVariadicWith3ArgsBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.callVariadic` here,when calling `Variadic::WithoutVariadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.transitiveCallVariadicWith3ArgsBisBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.callVariadic` here,when calling `Variadic::WithoutVariadic$static.variadicArgInSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.callVariadicArg0InSinkBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.variadicArg0InSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
variadic.hack, Variadic::WithoutVariadic$static.FP_callVariadicArg0InSinkOk, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,when calling `Variadic::WithoutVariadic$static.variadicArg0InSink` here,value passed as argument `#0` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $root.Level1::taintSource()
vec_from_async.hack, $root.vecFromAsyncBad, 3, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
vec_from_async.hack, $root.vecFromAsyncBad2, 4, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
vecforeach.hack, $root.vecForeachBad, 7, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
vecforeach.hack, $root.vecForeachBad2, 7, PULSE_RESOURCE_LEAK, no_bucket, ERROR, [allocation part of the trace starts here,allocated here,awaitable becomes unreachable here]
