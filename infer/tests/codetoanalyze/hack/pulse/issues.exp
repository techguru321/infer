basic_object.hack, BasicObject::Main.set_and_get_A_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_B_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_C_bad, 10, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_Derived_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
basic_object.hack, BasicObject::Main.set_and_get_Derived_copy_bad, 9, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
control_flow.hack, $root.ControlFlow::typeCheckDoesntConfuseTheAnalysis_maintainsTaint_Bad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#2` to `$root.ControlFlow::typeCheckDoesntConfuseTheAnalysis_maintainsTaint_Bad` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.ControlFlow::typeCheckDoesntConfuseTheAnalysis_maintainsTaint_Bad, sink: $root.Level1::taintSink, tainted expression: $sc
cross_file_taint_flow.hack, $root.directCrossFileFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `OuterFile$static.taintSource` with kind `Simple`,value passed as argument `#1` to `OuterFile$static.taintSink` with kind `Simple`], source: OuterFile$static.taintSource, sink: OuterFile$static.taintSink, tainted expression: $tainted
cross_file_taint_flow.hack, $root.indirectCrossFileFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `OuterFile$static.tainted`,source of the taint here: value returned from `OuterFile$static.taintSource` with kind `Simple`,return from call to `OuterFile$static.tainted`,value passed as argument `#1` to `OuterFile$static.taintSink` with kind `Simple`], source: OuterFile$static.taintSource, sink: OuterFile$static.taintSink, tainted expression: $tainted
cross_file_taint_flow.hack, $root.inheritanceCrossFileFlowBad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `OuterFileSuper$static.superTaintSource` with kind `Simple`,value passed as argument `#1` to `OuterFile$static.taintSink` with kind `Simple`], source: OuterFileSuper$static.superTaintSource, sink: OuterFile$static.taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.init_and_load_bad, 6, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.copy_on_write_bad, 10, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
dict.hack, DictTests::Main.FP_copy_on_write_good, 10, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
function_reference.hack, FunctionReference::Main.id_fst_bad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
intra_file_flow.hack, IntraFileFlow.explicitSinkMethodDirectOnHackMixedSinkBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow.explicitSinkMethodDirectOnHackMixedSinkBad` with kind `Simple`,when calling `IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad` here,value passed as argument `#1` to `HackMixed$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow.explicitSinkMethodDirectOnHackMixedSinkBad, sink: HackMixed$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad` with kind `Simple`,value passed as argument `#1` to `HackMixed$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow$static.explicitSinkMethodDirectOnHackMixedSinkBad, sink: HackMixed$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFileFlow.explicitSinkMethodDirectBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow.explicitSinkMethodDirectBad` with kind `Simple`,when calling `IntraFileFlow$static.explicitSinkMethodDirectBad` here,value passed as argument `#1` to `UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow.explicitSinkMethodDirectBad, sink: UnknownClass$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFileFlow$static.explicitSinkMethodDirectBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow$static.explicitSinkMethodDirectBad` with kind `Simple`,value passed as argument `#1` to `UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow$static.explicitSinkMethodDirectBad, sink: UnknownClass$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFileFlow.explicitSinkMethodDerivedBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow.explicitSinkMethodDerivedBad` with kind `Simple`,when calling `IntraFileFlow$static.explicitSinkMethodDerivedBad` here,value passed as argument `#1` to `UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow.explicitSinkMethodDerivedBad, sink: UnknownClass$static.explicitSinkAllArgs, tainted expression: $sc
intra_file_flow.hack, IntraFileFlow$static.explicitSinkMethodDerivedBad, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow$static.explicitSinkMethodDerivedBad` with kind `Simple`,in call to function `SensitiveClass.getDerived` with no summary,value passed as argument `#1` to `UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow$static.explicitSinkMethodDerivedBad, sink: UnknownClass$static.explicitSinkAllArgs, tainted expression: $derived
intra_file_flow.hack, IntraFileFlow.explicitSinkMethodDerivedDynamicBad, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow.explicitSinkMethodDerivedDynamicBad` with kind `Simple`,in call to function `SensitiveClass.getDerived` with no summary,when calling `IntraFileFlow.callExplicitSinkAllArgs` here,value passed as argument `#1` to `UnknownClass$static.explicitSinkAllArgs` with kind `Simple`], source: IntraFileFlow.explicitSinkMethodDerivedDynamicBad, sink: UnknownClass$static.explicitSinkAllArgs, tainted expression: $derived
intra_file_flow.hack, IntraFileFlow.explicitSinkClassDirectBad, 0, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow.explicitSinkClassDirectBad` with kind `Simple`,when calling `IntraFileFlow$static.explicitSinkClassDirectBad` here,value passed as argument `#1` to `Logger$static.someLogMethod` with kind `Simple`], source: IntraFileFlow.explicitSinkClassDirectBad, sink: Logger$static.someLogMethod, tainted expression: $sc
intra_file_flow.hack, IntraFileFlow$static.explicitSinkClassDirectBad, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#1` to `IntraFileFlow$static.explicitSinkClassDirectBad` with kind `Simple`,value passed as argument `#1` to `Logger$static.someLogMethod` with kind `Simple`], source: IntraFileFlow$static.explicitSinkClassDirectBad, sink: Logger$static.someLogMethod, tainted expression: $sc
late_binding.hack, LateBinding::Main.call_caller_bad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
late_binding.hack, LateBinding::Main.call_parent_caller_bad, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1.hack, $root.Level1::basicFlowBad, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::Main.fromABad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::Main.fromBBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::Main.fromCBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::C.sourceIfC`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::C.sourceIfC`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_extends.hack, ExtendsTests::NeedSpecialization$static.fromABad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,return from call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: ExtendsTests::NeedSpecialization$static.getSourceIfA()
level1_with_extends.hack, ExtendsTests::NeedSpecialization$static.fromBBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,in call to `ExtendsTests::A.sourceIfA`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::A.sourceIfA`,return from call to `ExtendsTests::NeedSpecialization$static.getSourceIfA`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: ExtendsTests::NeedSpecialization$static.getSourceIfA()
level1_with_extends.hack, ExtendsTests::NeedSpecialization$static.fromCBad, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `ExtendsTests::NeedSpecialization$static.getSourceIfC`,in call to `ExtendsTests::C.sourceIfC`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `ExtendsTests::C.sourceIfC`,return from call to `ExtendsTests::NeedSpecialization$static.getSourceIfC`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: ExtendsTests::NeedSpecialization$static.getSourceIfC()
level1_with_static.hack, StaticTests::Main.fromABad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `StaticTests::A$static.source`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `StaticTests::A$static.source`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level1_with_static.hack, StaticTests::Main.fromBBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `StaticTests::A$static.source`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `StaticTests::A$static.source`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
level5.hack, Level5.runBad, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Level5.loadUsingSuperContext`,in call to `Level5$static.loadUsingSuperContext`,source of the taint here: value returned from `Level5Base$static.getSuperContext` with kind `Simple`,return from call to `Level5$static.loadUsingSuperContext`,return from call to `Level5.loadUsingSuperContext`,when calling `Level5.useDaoContext` here,when calling `Level5$static.useDaoContext` here,when calling `Dao.useContext` here,when calling `DaoQueries$static.queryA` here,value passed as argument `#1` to `Level5DaoQueries$static.query` with kind `Simple`], source: Level5Base$static.getSuperContext, sink: Level5DaoQueries$static.query, tainted expression: $tainted_dao->context
method_resolution_trait1.hack, $root.basicFlowBad10, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad10.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad10.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait1.hack, $root.basicFlowBad11, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad11.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad11.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait1.hack, $root.basicFlowBad12, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad12.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad12.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait1.hack, $root.basicFlowBad13, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `Bad13.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `Bad13.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait2.hack, $root.basicFlowBad20, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadT.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadT.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait2.hack, $root.basicFlowBad21, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadP.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadP.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
method_resolution_trait2.hack, $root.basicFlowOk22, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadP.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadP.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $untainted
method_resolution_trait3.hack, $root.basicFlowBad30, 3, TAINT_ERROR, no_bucket, ERROR, [in call to `BadP.runSource`,source of the taint here: value returned from `$root.Level1::taintSource` with kind `Simple`,return from call to `BadP.runSource`,value passed as argument `#1` to `$root.Level1::taintSink` with kind `Simple`], source: $root.Level1::taintSource, sink: $root.Level1::taintSink, tainted expression: $tainted
