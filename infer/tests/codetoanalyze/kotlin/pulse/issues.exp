taint/Annotations.kt, codetoanalyze.kotlin.pulse.Annotations.markedSourceToMarkedSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String Annotations.markedSource()` with kind `Simple`,value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`], source: String Annotations.markedSource(), sink: void Annotations.markedSink(String), tainted expression: String Annotations.markedSource()
taint/Annotations.kt, codetoanalyze.kotlin.pulse.Annotations.markedSourceUsingUnmarkedSanitizerToMarkedSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String Annotations.markedSource()` with kind `Simple`,value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`], source: String Annotations.markedSource(), sink: void Annotations.markedSink(String), tainted expression: String Annotations.unmarkedSanitizer(String)
taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaArrayBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: arr[_]
taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaArrayThenFieldBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Arrays$Obj.getF()
taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaFieldThenArrayBad1(codetoanalyze.kotlin.pulse.Arrays$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object[] Arrays$Obj.getArr()[_]
taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaFieldThenArrayBad2():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object[] Arrays$Obj.getArr()[_]
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.directBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaVarBad1():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaVarBad2():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaVarBad3():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: alias
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaCastBad1():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaCastBad2():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad1(boolean):void, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad2(boolean):void, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad3(boolean):void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad4(boolean,boolean):void, 9, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad5(boolean):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.switchBad1(int):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.switchBad2(int):void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.whileBad1(int):void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.whileBad2(int):void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.noTripleReportBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.noTripleReportBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.arrayWithTaintedContentsBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: arr
taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.funCallBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Basics.passToSinkOk(int,Object)` here,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
taint/Constants.kt, codetoanalyze.kotlin.pulse.Constants.nonLiteralTaintedBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void Constants.source(Object)` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void Constants.source(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: obj
taint/DynamicDispatch.kt, codetoanalyze.kotlin.pulse.DynamicDispatch.propagateViaInterfaceBad(codetoanalyze.kotlin.pulse.DynamicDispatch$Interface):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `Object DynamicDispatch$Interface.propagate(Object)` with no summary,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource
taint/TaintFormals.kt, codetoanalyze.kotlin.pulse.TaintFormals.firstParameterTainted(java.lang.Object,java.lang.Object):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintFormals.firstParameterTainted(Object,Object)` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintFormals.firstParameterTainted(Object,Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: tainted
taint/TaintFormals.kt, codetoanalyze.kotlin.pulse.TaintFormals$callbackAnonymousClassTaintedBad$1.onCompletion(java.lang.Object):void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintFormals$callbackAnonymousClassTaintedBad$1.onCompletion(Object)` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintFormals$callbackAnonymousClassTaintedBad$1.onCompletion(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: result
taint/TaintFormals.kt, codetoanalyze.kotlin.pulse.TaintFormals$Lambda$_3_3.onCompletion(java.lang.Object):void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintFormals$Lambda$_3_3.onCompletion(Object)` with kind `Simple`,when calling `void TaintFormals.access_codetoanalyze.kotlin.pulse.TaintFormals$Lambda$_3_3(Object)` here,when calling `void TaintFormals.callbackLambdaTaintedBad$lambda$0(Object)` here,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintFormals$Lambda$_3_3.onCompletion(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: UNKNOWN
taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedBasedOnClassNameRegexBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaintSinks.sink1(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaintSinks.sink1(Object), tainted expression: src
taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedBasedOnClassNameRegexBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaintSinks.sink2(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaintSinks.sink2(Object), tainted expression: src
taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedFromInferBaseSourceBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String InferBaseSource.inferBaseSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: String InferBaseSource.inferBaseSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedFromInferChildSourceBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String InferChildSource.inferChildSecretSource()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: String InferChildSource.inferChildSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
taint/TaintedThis.kt, codetoanalyze.kotlin.pulse.TaintedThis.taintThisBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: this/self reference `void TaintedThis.taintThisBad()` with kind `Simple`,value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintedThis.taintThisBad(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: this->field
