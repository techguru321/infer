/* @generated */
digraph iCFG {
"shortcircuit_or12" [label="12:  BinaryOperatorStmt: Assign \n   *&x:int *=32 [line 17]\n " shape="box"]
	

	 "shortcircuit_or12" -> "shortcircuit_or3" ;
"shortcircuit_or11" [label="11:  BinaryOperatorStmt: Assign \n   *&x:int *=17 [line 15]\n " shape="box"]
	

	 "shortcircuit_or11" -> "shortcircuit_or3" ;
"shortcircuit_or10" [label="10: Prune (false branch) \n   PRUNE(((n$2 == 2) == 0), false); [line 14]\n " shape="invhouse"]
	

	 "shortcircuit_or10" -> "shortcircuit_or12" ;
"shortcircuit_or9" [label="9: Prune (true branch) \n   PRUNE(((n$2 == 2) != 0), true); [line 14]\n " shape="invhouse"]
	

	 "shortcircuit_or9" -> "shortcircuit_or11" ;
"shortcircuit_or8" [label="8:  BinaryOperatorStmt: EQ \n   n$1=*&x:int * [line 14]\n  n$2=*n$1:int  [line 14]\n " shape="box"]
	

	 "shortcircuit_or8" -> "shortcircuit_or9" ;
	 "shortcircuit_or8" -> "shortcircuit_or10" ;
"shortcircuit_or7" [label="7: Prune (false branch) \n   PRUNE(((n$0 == 0) == 0), false); [line 14]\n " shape="invhouse"]
	

	 "shortcircuit_or7" -> "shortcircuit_or8" ;
"shortcircuit_or6" [label="6: Prune (true branch) \n   PRUNE(((n$0 == 0) != 0), true); [line 14]\n " shape="invhouse"]
	

	 "shortcircuit_or6" -> "shortcircuit_or11" ;
"shortcircuit_or5" [label="5:  BinaryOperatorStmt: EQ \n   n$0=*&x:int * [line 14]\n " shape="box"]
	

	 "shortcircuit_or5" -> "shortcircuit_or6" ;
	 "shortcircuit_or5" -> "shortcircuit_or7" ;
"shortcircuit_or4" [label="4:  between_join_and_exit \n  " shape="box"]
	

	 "shortcircuit_or4" -> "shortcircuit_or2" ;
"shortcircuit_or3" [label="3: + \n  " ]
	

	 "shortcircuit_or3" -> "shortcircuit_or4" ;
"shortcircuit_or2" [label="2: Exit shortcircuit_or \n  " color=yellow style=filled]
	

"shortcircuit_or1" [label="1: Start shortcircuit_or\nFormals:  x:int *\nLocals:  \n   DECLARE_LOCALS(&return); [line 12]\n " color=yellow style=filled]
	

	 "shortcircuit_or1" -> "shortcircuit_or5" ;
"shortcircuit_and21" [label="21:  BinaryOperatorStmt: Assign \n   n$7=*&x:int * [line 25]\n  *n$7:int =32 [line 25]\n " shape="box"]
	

	 "shortcircuit_and21" -> "shortcircuit_and3" ;
"shortcircuit_and20" [label="20:  BinaryOperatorStmt: Assign \n   *&x:int *=17 [line 23]\n " shape="box"]
	

	 "shortcircuit_and20" -> "shortcircuit_and3" ;
"shortcircuit_and19" [label="19: Prune (false branch) \n   n$6=*&0$?%__sil_tmpSIL_temp_conditional___n$3:int  [line 22]\n  PRUNE((n$6 == 0), false); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and19" -> "shortcircuit_and21" ;
"shortcircuit_and18" [label="18: Prune (true branch) \n   n$6=*&0$?%__sil_tmpSIL_temp_conditional___n$3:int  [line 22]\n  PRUNE((n$6 != 0), true); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and18" -> "shortcircuit_and20" ;
"shortcircuit_and17" [label="17:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$3:int =1 [line 22]\n " shape="box"]
	

	 "shortcircuit_and17" -> "shortcircuit_and12" ;
"shortcircuit_and16" [label="16:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$3:int =0 [line 22]\n " shape="box"]
	

	 "shortcircuit_and16" -> "shortcircuit_and12" ;
"shortcircuit_and15" [label="15: Prune (false branch) \n   PRUNE((n$5 == 0), false); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and15" -> "shortcircuit_and17" ;
"shortcircuit_and14" [label="14: Prune (true branch) \n   PRUNE((n$5 != 0), true); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and14" -> "shortcircuit_and16" ;
"shortcircuit_and13" [label="13:  BinaryOperatorStmt: Assign \n   n$4=_fun_getenv(\"BLOCK\":char *) [line 22]\n  *&x:int *=n$4 [line 22]\n  n$5=*&x:int * [line 22]\n " shape="box"]
	

	 "shortcircuit_and13" -> "shortcircuit_and14" ;
	 "shortcircuit_and13" -> "shortcircuit_and15" ;
"shortcircuit_and12" [label="12: + \n  " ]
	

	 "shortcircuit_and12" -> "shortcircuit_and18" ;
	 "shortcircuit_and12" -> "shortcircuit_and19" ;
"shortcircuit_and11" [label="11: Prune (false branch) \n   n$2=*&0$?%__sil_tmpSIL_temp_conditional___n$0:int  [line 22]\n  PRUNE((n$2 == 0), false); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and11" -> "shortcircuit_and21" ;
"shortcircuit_and10" [label="10: Prune (true branch) \n   n$2=*&0$?%__sil_tmpSIL_temp_conditional___n$0:int  [line 22]\n  PRUNE((n$2 != 0), true); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and10" -> "shortcircuit_and13" ;
"shortcircuit_and9" [label="9:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$0:int =1 [line 22]\n " shape="box"]
	

	 "shortcircuit_and9" -> "shortcircuit_and5" ;
"shortcircuit_and8" [label="8:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$0:int =0 [line 22]\n " shape="box"]
	

	 "shortcircuit_and8" -> "shortcircuit_and5" ;
"shortcircuit_and7" [label="7: Prune (false branch) \n   n$1=*&x:int * [line 22]\n  PRUNE((n$1 == 0), false); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and7" -> "shortcircuit_and9" ;
"shortcircuit_and6" [label="6: Prune (true branch) \n   n$1=*&x:int * [line 22]\n  PRUNE((n$1 != 0), true); [line 22]\n " shape="invhouse"]
	

	 "shortcircuit_and6" -> "shortcircuit_and8" ;
"shortcircuit_and5" [label="5: + \n  " ]
	

	 "shortcircuit_and5" -> "shortcircuit_and10" ;
	 "shortcircuit_and5" -> "shortcircuit_and11" ;
"shortcircuit_and4" [label="4:  between_join_and_exit \n  " shape="box"]
	

	 "shortcircuit_and4" -> "shortcircuit_and2" ;
"shortcircuit_and3" [label="3: + \n  " ]
	

	 "shortcircuit_and3" -> "shortcircuit_and4" ;
"shortcircuit_and2" [label="2: Exit shortcircuit_and \n  " color=yellow style=filled]
	

"shortcircuit_and1" [label="1: Start shortcircuit_and\nFormals:  x:int *\nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$0:int  0$?%__sil_tmpSIL_temp_conditional___n$3:int  \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$0,&0$?%__sil_tmpSIL_temp_conditional___n$3); [line 21]\n " color=yellow style=filled]
	

	 "shortcircuit_and1" -> "shortcircuit_and6" ;
	 "shortcircuit_and1" -> "shortcircuit_and7" ;
"test_loop28" [label="28:  BinaryOperatorStmt: Assign \n   n$11=_fun_getenv(\"BLOCK\":char *) [line 34]\n  *&spec:char *=n$11 [line 34]\n " shape="box"]
	

	 "test_loop28" -> "test_loop3" ;
"test_loop27" [label="27:  BinaryOperatorStmt: Assign \n   *&block_size:char *=0 [line 38]\n " shape="box"]
	

	 "test_loop27" -> "test_loop3" ;
"test_loop26" [label="26: Prune (false branch) \n   n$10=*&0$?%__sil_tmpSIL_temp_conditional___n$7:int  [line 37]\n  PRUNE((n$10 == 0), false); [line 37]\n " shape="invhouse"]
	

	 "test_loop26" -> "test_loop2" ;
"test_loop25" [label="25: Prune (true branch) \n   n$10=*&0$?%__sil_tmpSIL_temp_conditional___n$7:int  [line 37]\n  PRUNE((n$10 != 0), true); [line 37]\n " shape="invhouse"]
	

	 "test_loop25" -> "test_loop27" ;
"test_loop24" [label="24:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$7:int =1 [line 37]\n " shape="box"]
	

	 "test_loop24" -> "test_loop19" ;
"test_loop23" [label="23:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$7:int =0 [line 37]\n " shape="box"]
	

	 "test_loop23" -> "test_loop19" ;
"test_loop22" [label="22: Prune (false branch) \n   PRUNE((n$9 == 0), false); [line 37]\n " shape="invhouse"]
	

	 "test_loop22" -> "test_loop24" ;
"test_loop21" [label="21: Prune (true branch) \n   PRUNE((n$9 != 0), true); [line 37]\n " shape="invhouse"]
	

	 "test_loop21" -> "test_loop23" ;
"test_loop20" [label="20:  BinaryOperatorStmt: Assign \n   n$8=_fun_getenv(\"BLOCKSIZE\":char *) [line 37]\n  *&spec:char *=n$8 [line 37]\n  n$9=*&spec:char * [line 37]\n " shape="box"]
	

	 "test_loop20" -> "test_loop21" ;
	 "test_loop20" -> "test_loop22" ;
"test_loop19" [label="19: + \n  " ]
	

	 "test_loop19" -> "test_loop25" ;
	 "test_loop19" -> "test_loop26" ;
"test_loop18" [label="18: Prune (false branch) \n   n$6=*&0$?%__sil_tmpSIL_temp_conditional___n$3:int  [line 36]\n  PRUNE((n$6 == 0), false); [line 36]\n " shape="invhouse"]
	

	 "test_loop18" -> "test_loop2" ;
"test_loop17" [label="17: Prune (true branch) \n   n$6=*&0$?%__sil_tmpSIL_temp_conditional___n$3:int  [line 36]\n  PRUNE((n$6 != 0), true); [line 36]\n " shape="invhouse"]
	

	 "test_loop17" -> "test_loop20" ;
"test_loop16" [label="16:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$3:int =1 [line 36]\n " shape="box"]
	

	 "test_loop16" -> "test_loop11" ;
"test_loop15" [label="15:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$3:int =0 [line 36]\n " shape="box"]
	

	 "test_loop15" -> "test_loop11" ;
"test_loop14" [label="14: Prune (false branch) \n   PRUNE((n$5 == 0), false); [line 36]\n " shape="invhouse"]
	

	 "test_loop14" -> "test_loop16" ;
"test_loop13" [label="13: Prune (true branch) \n   PRUNE((n$5 != 0), true); [line 36]\n " shape="invhouse"]
	

	 "test_loop13" -> "test_loop15" ;
"test_loop12" [label="12:  BinaryOperatorStmt: Assign \n   n$4=_fun_getenv(\"BLOCK_SIZE\":char *) [line 36]\n  *&spec:char *=n$4 [line 36]\n  n$5=*&spec:char * [line 36]\n " shape="box"]
	

	 "test_loop12" -> "test_loop13" ;
	 "test_loop12" -> "test_loop14" ;
"test_loop11" [label="11: + \n  " ]
	

	 "test_loop11" -> "test_loop17" ;
	 "test_loop11" -> "test_loop18" ;
"test_loop10" [label="10: Prune (false branch) \n   n$2=*&0$?%__sil_tmpSIL_temp_conditional___n$0:int  [line 36]\n  PRUNE((n$2 == 0), false); [line 36]\n " shape="invhouse"]
	

	 "test_loop10" -> "test_loop2" ;
"test_loop9" [label="9: Prune (true branch) \n   n$2=*&0$?%__sil_tmpSIL_temp_conditional___n$0:int  [line 36]\n  PRUNE((n$2 != 0), true); [line 36]\n " shape="invhouse"]
	

	 "test_loop9" -> "test_loop12" ;
"test_loop8" [label="8:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$0:int =1 [line 36]\n " shape="box"]
	

	 "test_loop8" -> "test_loop4" ;
"test_loop7" [label="7:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$0:int =0 [line 36]\n " shape="box"]
	

	 "test_loop7" -> "test_loop4" ;
"test_loop6" [label="6: Prune (false branch) \n   n$1=*&spec:char * [line 36]\n  PRUNE((n$1 == 0), false); [line 36]\n " shape="invhouse"]
	

	 "test_loop6" -> "test_loop8" ;
"test_loop5" [label="5: Prune (true branch) \n   n$1=*&spec:char * [line 36]\n  PRUNE((n$1 != 0), true); [line 36]\n " shape="invhouse"]
	

	 "test_loop5" -> "test_loop7" ;
"test_loop4" [label="4: + \n  " ]
	

	 "test_loop4" -> "test_loop9" ;
	 "test_loop4" -> "test_loop10" ;
"test_loop3" [label="3: + \n  " ]
	

	 "test_loop3" -> "test_loop5" ;
	 "test_loop3" -> "test_loop6" ;
"test_loop2" [label="2: Exit test_loop \n  " color=yellow style=filled]
	

"test_loop1" [label="1: Start test_loop\nFormals: \nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$0:int  0$?%__sil_tmpSIL_temp_conditional___n$3:int  0$?%__sil_tmpSIL_temp_conditional___n$7:int  block_size:char * spec:char * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$0,&0$?%__sil_tmpSIL_temp_conditional___n$3,&0$?%__sil_tmpSIL_temp_conditional___n$7,&block_size,&spec); [line 29]\n " color=yellow style=filled]
	

	 "test_loop1" -> "test_loop28" ;
"main34" [label="34:  BinaryOperatorStmt: Assign \n   n$13=_fun_getenv(\"BLOCK\":char *) [line 47]\n  *&spec:char *=n$13 [line 47]\n " shape="box"]
	

	 "main34" -> "main6" ;
	 "main34" -> "main7" ;
"main33" [label="33:  BinaryOperatorStmt: Assign \n   *&block_size:char *=0 [line 53]\n " shape="box"]
	

	 "main33" -> "main29" ;
"main32" [label="32: Prune (false branch) \n   PRUNE(((n$12 == 39) == 0), false); [line 52]\n " shape="invhouse"]
	

	 "main32" -> "main29" ;
"main31" [label="31: Prune (true branch) \n   PRUNE(((n$12 == 39) != 0), true); [line 52]\n " shape="invhouse"]
	

	 "main31" -> "main33" ;
"main30" [label="30:  BinaryOperatorStmt: EQ \n   n$11=*&spec:char * [line 52]\n  n$12=*n$11:char  [line 52]\n " shape="box"]
	

	 "main30" -> "main31" ;
	 "main30" -> "main32" ;
"main29" [label="29: + \n  " ]
	

	 "main29" -> "main4" ;
"main28" [label="28:  BinaryOperatorStmt: Assign \n   *&block_size:char *=0 [line 50]\n " shape="box"]
	

	 "main28" -> "main4" ;
"main27" [label="27: Prune (false branch) \n   n$10=*&0$?%__sil_tmpSIL_temp_conditional___n$7:int  [line 49]\n  PRUNE((n$10 == 0), false); [line 49]\n " shape="invhouse"]
	

	 "main27" -> "main30" ;
"main26" [label="26: Prune (true branch) \n   n$10=*&0$?%__sil_tmpSIL_temp_conditional___n$7:int  [line 49]\n  PRUNE((n$10 != 0), true); [line 49]\n " shape="invhouse"]
	

	 "main26" -> "main28" ;
"main25" [label="25:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$7:int =1 [line 49]\n " shape="box"]
	

	 "main25" -> "main20" ;
"main24" [label="24:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$7:int =0 [line 49]\n " shape="box"]
	

	 "main24" -> "main20" ;
"main23" [label="23: Prune (false branch) \n   PRUNE((n$9 == 0), false); [line 49]\n " shape="invhouse"]
	

	 "main23" -> "main25" ;
"main22" [label="22: Prune (true branch) \n   PRUNE((n$9 != 0), true); [line 49]\n " shape="invhouse"]
	

	 "main22" -> "main24" ;
"main21" [label="21:  BinaryOperatorStmt: Assign \n   n$8=_fun_getenv(\"BLOCKSIZE\":char *) [line 49]\n  *&spec:char *=n$8 [line 49]\n  n$9=*&spec:char * [line 49]\n " shape="box"]
	

	 "main21" -> "main22" ;
	 "main21" -> "main23" ;
"main20" [label="20: + \n  " ]
	

	 "main20" -> "main26" ;
	 "main20" -> "main27" ;
"main19" [label="19: Prune (false branch) \n   n$6=*&0$?%__sil_tmpSIL_temp_conditional___n$3:int  [line 49]\n  PRUNE((n$6 == 0), false); [line 49]\n " shape="invhouse"]
	

	 "main19" -> "main30" ;
"main18" [label="18: Prune (true branch) \n   n$6=*&0$?%__sil_tmpSIL_temp_conditional___n$3:int  [line 49]\n  PRUNE((n$6 != 0), true); [line 49]\n " shape="invhouse"]
	

	 "main18" -> "main21" ;
"main17" [label="17:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$3:int =1 [line 49]\n " shape="box"]
	

	 "main17" -> "main12" ;
"main16" [label="16:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$3:int =0 [line 49]\n " shape="box"]
	

	 "main16" -> "main12" ;
"main15" [label="15: Prune (false branch) \n   PRUNE((n$5 == 0), false); [line 49]\n " shape="invhouse"]
	

	 "main15" -> "main17" ;
"main14" [label="14: Prune (true branch) \n   PRUNE((n$5 != 0), true); [line 49]\n " shape="invhouse"]
	

	 "main14" -> "main16" ;
"main13" [label="13:  BinaryOperatorStmt: Assign \n   n$4=_fun_getenv(\"BLOCK_SIZE\":char *) [line 49]\n  *&spec:char *=n$4 [line 49]\n  n$5=*&spec:char * [line 49]\n " shape="box"]
	

	 "main13" -> "main14" ;
	 "main13" -> "main15" ;
"main12" [label="12: + \n  " ]
	

	 "main12" -> "main18" ;
	 "main12" -> "main19" ;
"main11" [label="11: Prune (false branch) \n   n$2=*&0$?%__sil_tmpSIL_temp_conditional___n$0:int  [line 49]\n  PRUNE((n$2 == 0), false); [line 49]\n " shape="invhouse"]
	

	 "main11" -> "main30" ;
"main10" [label="10: Prune (true branch) \n   n$2=*&0$?%__sil_tmpSIL_temp_conditional___n$0:int  [line 49]\n  PRUNE((n$2 != 0), true); [line 49]\n " shape="invhouse"]
	

	 "main10" -> "main13" ;
"main9" [label="9:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$0:int =1 [line 49]\n " shape="box"]
	

	 "main9" -> "main5" ;
"main8" [label="8:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$0:int =0 [line 49]\n " shape="box"]
	

	 "main8" -> "main5" ;
"main7" [label="7: Prune (false branch) \n   n$1=*&spec:char * [line 49]\n  PRUNE((n$1 == 0), false); [line 49]\n " shape="invhouse"]
	

	 "main7" -> "main9" ;
"main6" [label="6: Prune (true branch) \n   n$1=*&spec:char * [line 49]\n  PRUNE((n$1 != 0), true); [line 49]\n " shape="invhouse"]
	

	 "main6" -> "main8" ;
"main5" [label="5: + \n  " ]
	

	 "main5" -> "main10" ;
	 "main5" -> "main11" ;
"main4" [label="4: + \n  " ]
	

	 "main4" -> "main3" ;
"main3" [label="3:  Return Stmt \n   *&return:int =0 [line 56]\n " shape="box"]
	

	 "main3" -> "main2" ;
"main2" [label="2: Exit main \n  " color=yellow style=filled]
	

"main1" [label="1: Start main\nFormals: \nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$0:int  0$?%__sil_tmpSIL_temp_conditional___n$3:int  0$?%__sil_tmpSIL_temp_conditional___n$7:int  block_size:char * spec:char * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$0,&0$?%__sil_tmpSIL_temp_conditional___n$3,&0$?%__sil_tmpSIL_temp_conditional___n$7,&block_size,&spec); [line 42]\n " color=yellow style=filled]
	

	 "main1" -> "main34" ;
}
